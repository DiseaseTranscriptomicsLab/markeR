[{"path":"https://diseasetranscriptomicslab.github.io/markeR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 markeR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rita Martins-Silva. Author, maintainer. Alexandre Kaizeler. Author, contributor. Nuno Luís Barbosa-Morais. Author, lead, thesis advisor.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Martins-Silva R, Kaizeler , Barbosa-Morais NL (2025). markeR: R Toolkit Evaluating Gene Signatures Phenotypic Markers. R package version 1.0.0, https://diseasetranscriptomicslab.github.io/markeR/.","code":"@Manual{,   title = {markeR: An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers},   author = {Rita Martins-Silva and Alexandre Kaizeler and Nuno Luís Barbosa-Morais},   year = {2025},   note = {R package version 1.0.0},   url = {https://diseasetranscriptomicslab.github.io/markeR/}, }"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/index.html","id":"marker","dir":"","previous_headings":"","what":"An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers","title":"An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers","text":"markeR provides suite methods using gene sets (signatures) quantify evaluate extent given gene signature marks specific phenotype. package implements various scoring, enrichment classification approaches, along tools compute performance metrics visualize results.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/index.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of Contents","title":"An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers","text":"Installation Main Functions Future Modules Example Expression Heatmap Expression Violins Correlation Heatmap ROC AUC Cohen’s D PCA Genes Interest logmedian Method ssGSEA Method Ranking Method Methods Classification Potential Gene Signatures False Discovery Rate (FDR) Calculations Score association Chosen Variables Note Continuous Variables Gene Set Enrichment Analyses GSEA Association Chosen Variables","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers","text":"user can install development version markeR GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"DiseaseTranscriptomicsLab/markeR\")"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/index.html","id":"main-functions-and-future-modules","dir":"","previous_headings":"","what":"Main Functions and Future Modules","title":"An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers","text":"current release markeR includes four primary functions score-based analysis: CalculateScores: Calculates gene signature scores sample using either ssGSEA, log2 median-centered ranking method. PlotScores: Calculates displays calculated scores across conditions using violin plots, density plots, heatmaps volcano-like plots, depending chosen parameters. ROC_Scores: Generates ROC curves different scoring methods across contrasts, allowing users visualize performance differences. AUC_Scores: Generates heatmaps gene signature, methods columns contrasts rows, summarizing AUC values heatmap format. Additionally, includes function FDR calculation based random sets genes signature: FDR_Simulation: Computes false discovery rates using random gene sets. Tthe package also includes several functions enrichment-based analysis: calculateDE: Performs differential expression analysis. plotVolcano: Generates volcano plots visualize differentially expressed genes. runGSEA: Performs GSEA using fgsea contrast list differential expression results. plotGSEAenrichment: Generates enrichment plots gene sets using fgsea::plotEnrichment() function plotNESlollipop: Generates lollipop plot visualize Gene Set Enrichment Analysis (GSEA) results. plotCombinedGSEA: Creates scatter plot visualizing multiple GSEA (Gene Set Enrichment Analysis) results across different contrasts. analyzing data, often unclear whether given variable meaningfully associated target score. assist exploratory process, package also provides statistical tests visualizations assess relationships variables different types (called Variable Association module): VariableAssociation_Scores: Assesses relationship metadata variables computed scores using effect size estimation, statistical tests, visualizations. VariableAssociation_GSEA: Evaluates metadata variables influence gene set enrichment results, identifying significant associations enrichment scores. markeR also includes functions visualising individual genes gene signature: IndividualGenes_Violins: creates violin plots gene expression data jittered points optional faceting, allowing visualization individual gene expression distributions across sample groups. CorrelationHeatmap: computes visualizes correlation heatmap given set genes. Optionally, heatmap can generated separately different conditions based metadata. ExpressionHeatmap: generates expression heatmap customizable sample annotations given set genes. ROCandAUCplot: computes ROC curves AUC values gene based gene expression data sample metadata. can generate ROC plots, AUC heatmap, arranged side‐‐side. CohenDH_IndividualGenes: computes Cohen’s d gene based gene expression data sample metadata. resulting effect sizes visualized heatmap. plotPCA: performs PCA given dataset visualizes results using ggplot2. allows users specify genes interest (understand sufficient explain main variance data), customize scaling centering, color points based metadata variable.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers","text":"using already pre-processed gene expression dataset, derived Marthandan et al. (2016) study (GSE63577), includes human fibroblast samples cultured two different conditions: replicative senescence proliferative control. dataset already filtered normalized using edgeR package, corrected batch effect described Schneider et al. (2024). information dataset structure, see help pages ?counts_example ?metadata_example. dataset serves working example demonstrate main functionalities markeR package. particular, used showcase two primary modules designed benchmarking gene signatures: Score: calculates expression-based signature scores sample, Enrichment: evaluates -representation gene signatures within ranked gene lists. keep things simple illustrative, use basic senescence gene signature consisting small set well-established senescence-associated genes commonly reported literature. illustration purposes different variable types, let’s imagine also two variables: one defining number days passed sample preparation sequencing, one defining person processed . variables completely random, initial study.","code":"library(markeR) # Define simple Senescence Signature SimpleSenescenceSignature <- c(\"CDKN1A\", \"CDKN2A\", \"GLB1\",\"TP53\",\"CCL2\", \"LMNB1\", \"MKI67\" ) data(counts_example) # Load example data counts_example[1:5,1:5] #>          SRR1660534 SRR1660535 SRR1660536 SRR1660537 SRR1660538 #> A1BG        9.94566   9.476768   8.229231   8.515083   7.806479 #> A1BG-AS1   12.08655  11.550303  12.283976   7.580694   7.312666 #> A2M        77.50289  56.612839  58.860268   8.997624   6.981857 #> A4GALT     14.74183  15.226083  14.815891  14.675780  15.222488 #> AAAS       47.92755  46.292377  43.965972  47.109493  47.213739 data(metadata_example)  set.seed(\"123456\")  metadata_example$person <- sample(c(\"John\",\"Ana\",\"Francisca\"),39, replace = T) metadata_example$days <- sample(c(1:20),39, replace = T)   head(metadata_example) #>       sampleID      DatasetID   CellType     Condition       SenescentType #> 252 SRR1660534 Marthandan2016 Fibroblast     Senescent Telomere shortening #> 253 SRR1660535 Marthandan2016 Fibroblast     Senescent Telomere shortening #> 254 SRR1660536 Marthandan2016 Fibroblast     Senescent Telomere shortening #> 255 SRR1660537 Marthandan2016 Fibroblast Proliferative                none #> 256 SRR1660538 Marthandan2016 Fibroblast Proliferative                none #> 257 SRR1660539 Marthandan2016 Fibroblast Proliferative                none #>                         Treatment    person days #> 252 PD72 (Replicative senescence)       Ana    6 #> 253 PD72 (Replicative senescence)       Ana   18 #> 254 PD72 (Replicative senescence)      John   19 #> 255                         young       Ana    2 #> 256                         young Francisca    9 #> 257                         young      John   10"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/index.html","id":"visualise-individual-genes-from-senescence-signature","dir":"","previous_headings":"Example","what":"Visualise Individual Genes from Senescence Signature","title":"An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers","text":"markeR provides suite functions explore expression behavior individual genes within signature. tools especially useful user want inspect specific genes contribute signature’s overall behavior.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/index.html","id":"expression-heatmap","dir":"","previous_headings":"Example > Visualise Individual Genes from Senescence Signature","what":"Expression Heatmap","title":"An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers","text":"ExpressionHeatmap function generates heatmap display expression levels selected senescence genes across samples. Samples annotated chosen condition, expression values color-scaled easy visual comparison. Clustering options customizable color palettes allow flexible informative visualization.","code":"annotation_colors <- list(    Condition = c(     \"Senescent\"     = \"#65AC7C\",  # Example color: greenish     \"Proliferative\" = \"#5F90D4\"  # Example color: blueish    ) )  ExpressionHeatmap(data=counts_example,                    metadata = metadata_example,                    genes=SimpleSenescenceSignature,                     annotate.by = c(\"Condition\"),                   annotation_colors = annotation_colors,                   colorlist = list(low = \"#3F4193\", mid = \"#F9F4AE\", high = \"#B44141\"),                   cluster_rows = TRUE,                    cluster_columns = FALSE,                   title = \"Senescence Genes\",                    titlesize = 20,                   legend_position = \"right\",                   scale_position=\"right\")"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/index.html","id":"expression-violins","dir":"","previous_headings":"Example > Visualise Individual Genes from Senescence Signature","what":"Expression Violins","title":"An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers","text":"IndividualGenes_Violins function creates violin plots visualize expression distributions selected senescence genes across conditions. Jittered points represent individual samples, grouping (x axis, GroupingVariable) color variables (ColorVariable ColorValues) metadata allow additional stratification insight. Customization options include layout, point size, colors, axis labeling.","code":"senescence_triggers_colors <- c(   \"none\" = \"#E57373\",  # Soft red      \"Telomere shortening\" = \"#4FC3F7\"  # Vivid sky blue   )   IndividualGenes_Violins(data = counts_example,                          metadata = metadata_example,                          genes = SimpleSenescenceSignature,                          GroupingVariable = \"Condition\",                          plot=T,                          ncol=NULL,                          nrow=1,                          divide=NULL,                          invert_divide=FALSE,                         ColorValues=senescence_triggers_colors,                          pointSize=2,                          ColorVariable=\"SenescentType\",                          title=\"Senescence Genes\",                          widthTitle=16,                         y_limits = NULL,                         legend_nrow=1,                          xlab=\"Condition\",                         colorlab=\"\")"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/index.html","id":"correlation-heatmap","dir":"","previous_headings":"Example > Visualise Individual Genes from Senescence Signature","what":"Correlation Heatmap","title":"An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers","text":"CorrelationHeatmap function displays pairwise correlations selected genes, helping reveal co-expression patterns within senescence signature. Correlations can computed separately different conditions, heatmap fully customizable options clustering, color scaling, correlation method (e.g., Spearman Pearson).","code":"CorrelationHeatmap(data=counts_example,                     metadata = metadata_example,                     genes=SimpleSenescenceSignature,                     separate.by = \"Condition\",                     method = \"spearman\",                      colorlist = list(low = \"#3F4193\", mid = \"#F9F4AE\", high = \"#B44141\"),                    limits_colorscale = c(-1,0,1),                     widthTitle = 16,                     title = \"Senescence Genes\",                     cluster_rows = TRUE,                     cluster_columns = TRUE,                      detailedresults = FALSE,                     legend_position=\"right\",                    titlesize=20)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/index.html","id":"roc-and-auc","dir":"","previous_headings":"Example > Visualise Individual Genes from Senescence Signature","what":"ROC and AUC","title":"An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers","text":"ROCandAUCplot function evaluates predictive power individual genes signature computing ROC curves AUC values based binary classification (e.g., senescent vs. proliferative). selected grouping variable two levels, user can specify reference group using class parameter — example, interested variable levels , B, C D, setting class = c(\"\", \"B\") compare group /B versus remaining groups (C/D). Additionally, user can use group_var parameter split display results separately level another metadata variable — allowing subgroup-specific ROC analyses. Outputs include individual ROC plots AUC heatmap, customizable layout, color schemes, clustering options—ideal identifying genes strong discriminative ability.","code":"senescence_triggers_colors <- c(   \"none\" = \"#E57373\",  # Soft red      \"Telomere shortening\" = \"#4FC3F7\"  # Vivid sky blue   )  ROCandAUCplot(counts_example,                metadata_example,                condition_var = \"Condition\",                class = \"Senescent\",                group_var=NULL,               genes=SimpleSenescenceSignature,                plot_type = \"all\",               heatmap_params = list(col = list( \"#F9F4AE\" ,\"#B44141\"),                                     limits = c(0.5,1),                                     cluster_rows=T),               roc_params = list(nrow=3,                                 ncol=3,                                 colors=senescence_triggers_colors),               commomplot_params = list(widths=c(0.5,0.3)))"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/index.html","id":"cohens-d","dir":"","previous_headings":"Example > Visualise Individual Genes from Senescence Signature","what":"Cohen’s D","title":"An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers","text":"CohenD_IndividualGenes function computes effect size (Cohen’s d) gene, quantifying magnitude expression differences two conditions, given variable condition_var. selected condition variable two levels, class parameter specifies condition compared rest. Additionally, user can use group_var parameter split display results separately level another metadata variable. Results visualized heatmap, customizable color scales clustering options easy interpretation effect sizes across genes.","code":"CohenD_IndividualGenes(counts_example,                         metadata_example,                         genes=SimpleSenescenceSignature,                        condition_var = \"Condition\",                         class = \"Senescent\",                         group_var = NULL,                          heatmap_params = list(col = list( \"#F9F4AE\" ,\"#B44141\"),                                              limits = NULL,                                              cluster_rows=T))"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/index.html","id":"pca-with-only-genes-of-interest","dir":"","previous_headings":"Example > Visualise Individual Genes from Senescence Signature","what":"PCA with only genes of interest","title":"An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers","text":"plotPCA function performs principal component analysis (PCA) selected set genes explore contribute variance dataset, allowing test genes signature sufficient separate groups interest (given parameter ColorVariable). function allows focus specific genes (e.g., senescence signature genes) visualize impact specific set principal components. PCs parameter enables specify principal component pairs plot, results customizable color annotations, point sizes, layout options comparing conditions groups.","code":"annotation_colors <- c(     \"Senescent\"     = \"#65AC7C\",  # Example color: greenish   \"Proliferative\" = \"#5F90D4\"  # Example color: blueish  )   plotPCA(data = counts_example,          metadata = metadata_example,          genes=SimpleSenescenceSignature,          scale=FALSE,          center=TRUE,          PCs=list(c(1,2), c(2,3), c(3,4)),          ColorVariable=\"Condition\",         ColorValues=annotation_colors,         pointSize=5,         legend_nrow=1,          ncol=3,          nrow=NULL)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/index.html","id":"calculate-senescence-scores","dir":"","previous_headings":"Example","what":"Calculate Senescence Scores","title":"An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers","text":"CalculateScores function computes signature scores sample based predefined gene sets, senescence signature. returns named list entry corresponds specific signature includes calculated scores, along metadata (available). setting method = \"\", function returns list, element corresponds scoring method contains respective data frame scores, allowing comparison methods. function allows users select three different scoring methods: ssGSEA: Computes enrichment score signature sample. logmedian: Calculates score sum normalized (log2-median-centered) expression values signature genes, divided number genes. ranking: Determines score ranking expression signature genes normalizing result. methods similar , applied robust gene signature, yield similar results across three methods. Empirically, good signature one shows consistent results, calculated scores Cohen’s d F statistics, across different methods. signature robust, considerable noise, results across methods may differ significantly. Consistent scores across methods typically indicate reliable meaningful signature. methods explained detail , allowing user select appropriate one analysis. PlotScores function can used compute visualize scores various ways, depending method variable chosen. method = \"\" variable categorical, return heatmap Cohen’s d F statistics volcano plot showing contrasts groups variable. method = \"\" variable numeric, heatmap Cohen’s F volcano plot produced. method != \"\" variable categorical, generate violin plot signature. method != \"\" variable NULL, density plot score distribution displayed. method != \"\" variable numeric, scatter plot created show relationship scores numeric variable.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/index.html","id":"logmedian-method","dir":"","previous_headings":"Example > Calculate Senescence Scores","what":"logmedian method","title":"An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers","text":"following example uses logmedian method calculate gene signature score. method computes score sample normalizing expression values signature genes, summing , dividing number genes signature. result score represents overall expression signature genes sample. user can chose calculate gene signature score sample based one predefined gene sets (signatures). ’s example calculate signature score using “logmedian” method: user can also chose directly plot scores. Effect sizes can computed using compute_cohen parameter (default = T): grouping variable two levels, Cohen’s d calculated default. two levels, Cohen’s f used unless specific pairwise comparison defined via cond_cohend, case Cohen’s d reported comparison. pvalcalc==TRUE (default = F), associated p-value (corrected multiple testing) reported.  Given genes expected upregulated others expected downregulated senescence, useful consider bidirectional signature. bidirectional signature, direction gene regulation (either ) explicitly accounted , offering nuanced insights gene expression changes different conditions. Unidirectional gene sets: gene sets genes assumed expected direction regulation (either upregulated downregulated). provide unidirectional signature, user submit named list element vector gene names representing gene set. first column contains gene names. second column indicates expected direction enrichment gene (1 representing upregulated genes -1 representing downregulated genes). example, user provides bidirectional signature specify direction regulation, results may differ significantly, given , without specifying direction, upregulated downregulated genes treated contribute equally overall score. case current example, senescent samples show lower score proliferative ones, dramatically affect interpretation results. specifying direction, senescent samples show higher score proliferative ones. Therefore, strongly advised , whenever possible, user state direction genes signature (information known). helps ensure accurate meaningful interpretations data.  use function numeric variables, user specify relevant parameters, including numeric variable analyzed. function generate scatter plot numeric variable, optionally calculating Cohen’s f effect size. user can choose correlation method (e.g., Pearson, Spearman, Kendall) assess relationship variable signature scores. plot also include optional p-value calculations comparisons. example configure function numeric variables:  users interested viewing overall distribution scores across gene signatures, PlotScores function can used without specifying GroupingVariable parameter. case, function automatically generate grid density plots, plot representing distribution scores specific gene signature. provides quick way visualize gene signature distributed across samples, allowing users assess overall spread scores without grouping metadata variable.","code":"df_Scores <- CalculateScores(data = counts_example,                              metadata = metadata_example,                              method = \"logmedian\",                              gene_sets = list(Senescence=SimpleSenescenceSignature)) #> Considering unidirectional gene signature mode for signature Senescence  head(df_Scores$Senescence) #>       sample      score      DatasetID   CellType     Condition #> 1 SRR1660534 -0.6894748 Marthandan2016 Fibroblast     Senescent #> 2 SRR1660535 -0.4483299 Marthandan2016 Fibroblast     Senescent #> 3 SRR1660536 -0.4596502 Marthandan2016 Fibroblast     Senescent #> 4 SRR1660537 -0.2198753 Marthandan2016 Fibroblast Proliferative #> 5 SRR1660538 -0.2672930 Marthandan2016 Fibroblast Proliferative #> 6 SRR1660539 -0.2623188 Marthandan2016 Fibroblast Proliferative #>         SenescentType                     Treatment    person days #> 1 Telomere shortening PD72 (Replicative senescence)       Ana    6 #> 2 Telomere shortening PD72 (Replicative senescence)       Ana   18 #> 3 Telomere shortening PD72 (Replicative senescence)      John   19 #> 4                none                         young       Ana    2 #> 5                none                         young Francisca    9 #> 6                none                         young      John   10 senescence_triggers_colors <- c(   \"none\" = \"#E57373\",  # Soft red      \"Telomere shortening\" = \"#4FC3F7\"  # Vivid sky blue   )  cond_cohend <- list(A=c(\"Senescent\"),                       B=c(\"Proliferative\"))  PlotScores(data = counts_example,             metadata = metadata_example,             gene_sets = list(Senescence=SimpleSenescenceSignature),            ColorVariable = \"SenescentType\",             Variable=\"Condition\",              method =\"logmedian\",             ColorValues = senescence_triggers_colors,             ConnectGroups=TRUE,             ncol = NULL,             nrow = NULL,             widthTitle=24,             limits = NULL,             legend_nrow = 1,             pointSize=4,            compute_cohen=T,            cond_cohend=cond_cohend,            title=\"Marthandan et al. 2016\",            labsize=9,             titlesize = 12) SimpleSenescenceSignature_bidirectional <- data.frame(gene=c(\"CDKN1A\", \"CDKN2A\", \"GLB1\",\"TP53\",\"CCL2\", \"LMNB1\", \"MKI67\" ),                                                       enrichment=c(1,1,1,1,1,-1,-1))  print(SimpleSenescenceSignature_bidirectional) #>     gene enrichment #> 1 CDKN1A          1 #> 2 CDKN2A          1 #> 3   GLB1          1 #> 4   TP53          1 #> 5   CCL2          1 #> 6  LMNB1         -1 #> 7  MKI67         -1  PlotScores(data = counts_example,             metadata = metadata_example,             gene_sets = list(Senescence=SimpleSenescenceSignature_bidirectional),            ColorVariable = \"SenescentType\",             Variable=\"Condition\",              method =\"logmedian\",             ColorValues = senescence_triggers_colors,             ConnectGroups=TRUE,             ncol = NULL,             nrow = NULL,             widthTitle=24,             limits = NULL,             legend_nrow = 1,             pointSize=4,            compute_cohen=T,            cond_cohend=cond_cohend,            title=\"Marthandan et al. 2016\",            labsize=9,             titlesize = 12) PlotScores(data = counts_example,            metadata = metadata_example,            gene_sets = list(Senescence_Bidirectional = SimpleSenescenceSignature_bidirectional,                             Senescence = SimpleSenescenceSignature),            Variable = \"days\",                           method = \"logmedian\",                        ColorValues = \"#3B415B\",                         ConnectGroups = FALSE,                      ncol = NULL,                                nrow = NULL,                                pointSize = 6,                              compute_cohen = TRUE,                      pvalcalc = TRUE,                            title = \"Marthandan et al. 2016\",              labsize=9,             titlesize = 12,             widthTitle = 26,            cor = \"pearson\") PlotScores(data = counts_example,             metadata = metadata_example,             gene_sets = list(Senescence_Bidirectional = SimpleSenescenceSignature_bidirectional,                             Senescence  = SimpleSenescenceSignature),             method =\"logmedian\",             ColorValues = NULL,              ncol = NULL,             nrow = NULL,             widthTitle=24,             limits = NULL,              title=\"Marthandan et al. 2016\",            labsize=9,             titlesize = 12)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/index.html","id":"ssgsea-method","dir":"","previous_headings":"Example > Calculate Senescence Scores","what":"ssGSEA method","title":"An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers","text":"Likewise, approach can applied ssGSEA method score calculation, unidirectional bidirectional signatures. following example demonstrates calculate visualize scores using ssGSEA method unidirectional bidirectional signatures. ssGSEA (single-sample Gene Set Enrichment Analysis) method (Barbie et al. (2009)) computes enrichment score gene signature sample. uses adaptation gsva() function GSVA package calculate scores, representing absolute enrichment gene set individual samples. method useful evaluating gene set enrichment working individual samples rather groups, described sections .","code":"senescence_triggers_colors <- c(   \"none\" = \"#E57373\",  # Soft red      \"Telomere shortening\" = \"#4FC3F7\"  # Vivid sky blue   )  cond_cohend <- list(A=c(\"Senescent\"),                       B=c(\"Proliferative\"))  PlotScores(data = counts_example,             metadata = metadata_example,             gene_sets = list(Senescence_Bidirectional = SimpleSenescenceSignature_bidirectional,                           Senescence  = SimpleSenescenceSignature),            ColorVariable = \"SenescentType\",             Variable=\"Condition\",              method =\"ssGSEA\",             ColorValues = senescence_triggers_colors,             ConnectGroups=TRUE,             ncol = NULL,             nrow = NULL,             widthTitle=24,             limits = NULL,             legend_nrow = 1,             pointSize=4,            compute_cohen=T,            cond_cohend=cond_cohend,            title=\"Marthandan et al. 2016\",            labsize=9,             titlesize = 12)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/index.html","id":"ranking-method","dir":"","previous_headings":"Example > Calculate Senescence Scores","what":"Ranking method","title":"An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers","text":"ranking method computes gene signature scores sample ranking expression signature genes dataset normalizing score based total number genes. method evaluates relative expression genes within signature, providing score based rank gene expression sample. following example demonstrates use “ranking” method unidirectional bidirectional signatures:","code":"senescence_triggers_colors <- c(   \"none\" = \"#E57373\",  # Soft red      \"Telomere shortening\" = \"#4FC3F7\"  # Vivid sky blue   )  cond_cohend <- list(A=c(\"Senescent\"),                       B=c(\"Proliferative\"))  PlotScores(data = counts_example,             metadata = metadata_example,             gene_sets = list(Senescence_Bidirectional = SimpleSenescenceSignature_bidirectional,                           Senescence  = SimpleSenescenceSignature),            ColorVariable = \"SenescentType\",             Variable=\"Condition\",              method =\"ranking\",             ColorValues = senescence_triggers_colors,             ConnectGroups=TRUE,             ncol = NULL,             nrow = NULL,             widthTitle=24,             limits = NULL,             legend_nrow = 1,             pointSize=4,            compute_cohen=T,            cond_cohend=cond_cohend,            title=\"Marthandan et al. 2016\",            labsize=9,             titlesize = 12)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/index.html","id":"all-methods","dir":"","previous_headings":"Example > Calculate Senescence Scores","what":"All methods","title":"An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers","text":"compare various metrics across different condition combinations, violin plots may always best choice. cases, users can setmethod = \"\" generate summary heatmap volcano-like plot. function return one heatmap per gene set, rows corresponding possible combinations values GroupingVariable. parenthesis represented p-value, adjusted using BH method, corrected contrast signature. also return volcano-like plot (Cohen’s d effect sizes vs -log10(adjusted p-values)), dot represents method-signature pair, faceted contrast. dashed lines represent user-defined thresholds significance effect size. mode parameter controls contrasts generated categorical variables, allowing users adjust complexity analysis: “simple”: Performs minimal number contrasts, typically comparing category baseline (e.g., factor levels , B, C D, may generate - B, - C, - D, B - C, B - D, C - D). “medium”: Expands simple mode including additional pairwise comparisons groups (e.g., - (B + C + D), B - (+ C + D), etc). “extensive”: Conducts possible comparisons, including complex interactions applicable, providing comprehensive analysis. (e.g., (+ B) - (C + D)).","code":"Overall_Scores <- PlotScores(data = counts_example,                               metadata = metadata_example,                                gene_sets=list(Senescence_Bidirectional = SimpleSenescenceSignature_bidirectional,                                             Senescence  = SimpleSenescenceSignature),                               Variable=\"Condition\",                                method =\"all\",                                 ncol = NULL,                               nrow = NULL,                               widthTitle=30,                               limits = c(0,3.5),                                 title=\"Marthandan et al. 2016\",                               titlesize = 10,                              ColorValues = list(heatmap=c(\"#F9F4AE\", \"#B44141\"),                                                 volcano=c(Senescence=\"#A07395\",                                                           Senescence_Bidirectional=\"#CA7E45\")),                              mode=\"simple\",                              widthlegend=30,                               sig_threshold=0.05,                               cohen_threshold=0.6,                              pointSize=6,                              colorPalette=\"Paired\") Overall_Scores$heatmap Overall_Scores$volcano"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/index.html","id":"classification-potential-of-gene-signatures","dir":"","previous_headings":"Example > Calculate Senescence Scores","what":"Classification Potential of Gene Signatures","title":"An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers","text":"ROC_Scores AUC_Scores functions allow users evaluate classification potential gene set scores based ROC curves AUC values, respectively. functions help assess well given score can differentiate conditions, based predefined contrasts. Besides method=\"\", functions can also used method individually. ROC_Scores function generates ROC curves different scoring methods across contrasts, allowing users visualize performance differences.  AUC_Scores function generates heatmaps gene signature, methods columns contrasts rows, summarizing AUC values heatmap format.","code":"ROC_Scores(data = counts_example,             metadata = metadata_example,             gene_sets=list(Senescence_Bidirectional = SimpleSenescenceSignature_bidirectional,                           Senescence  = SimpleSenescenceSignature),             method = \"all\",             variable =\"Condition\",            colors = c(logmedian = \"#3E5587\", ssGSEA = \"#B65285\", ranking = \"#B68C52\"),             grid = TRUE,             spacing_annotation=0.3,             ncol=NULL,             nrow=1,             mode = \"simple\",             widthTitle = 28,            titlesize = 10,              title=\"Marthandan et al. 2016\") AUC_Scores(data = counts_example,             metadata = metadata_example,             gene_sets=list(Senescence_Bidirectional = SimpleSenescenceSignature_bidirectional,                           Senescence  = SimpleSenescenceSignature),             method = \"all\",             mode = \"simple\",             variable=\"Condition\",             nrow = NULL,             ncol = NULL,             limits = NULL,             widthTitle = 28,             titlesize = 10,             ColorValues = c(\"#F9F4AE\", \"#B44141\"),               title=\"Marthandan et al. 2016\")"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/index.html","id":"false-discovery-rate-fdr-calculations","dir":"","previous_headings":"Example > Calculate Senescence Scores","what":"False Discovery Rate (FDR) Calculations","title":"An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers","text":"user can assess significance gene signature scores comparing observed effect sizes originated random signatures. original gene signature, function calculates observed Cohen’s d (p‑value) using (GroupingVariable). generates number simulated signatures (number_of_sims) randomly sampling genes user provided gene list (gene_list) computes Cohen’s d values. simulation results visualised violin plots display distribution Cohen’s d values method, overlaid observed values original signatures, 95th percentile threshold. Significance indicated distinct point shapes based associated p‑value.","code":"FDR_Simulation(data = counts_example,                metadata = metadata_example,                original_signatures = list(Senescence_Bidirectional = SimpleSenescenceSignature_bidirectional,                                           Senescence  = SimpleSenescenceSignature),                gene_list = row.names(counts_example),                number_of_sims = 10,                title = \"Marthandan et al. 2016\",                widthTitle = 30,                Variable = \"Condition\",                titlesize = 12,                pointSize = 5,                labsize = 10,                mode = \"simple\",                ColorValues=NULL,                ncol=NULL,                 nrow=NULL )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/index.html","id":"score-association-with-chosen-variables","dir":"","previous_headings":"Example > Calculate Senescence Scores","what":"Score association with Chosen Variables","title":"An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers","text":"analyzing data, often unclear whether given variable meaningfully associated target score. assist exploratory process, package provides statistical tests visualizations assess relationships variables different types. Overall effects: Linear models estimate effect sizes (Cohen’s f) numeric categorical variables. Pairwise contrasts: Categorical variables compared across possible contrasts using Cohen’s d adjusted p-values. categorical variables 10 unique values, warning issued ensure meaningful interpretation. Visual insights: Lollipop plots highlight effect sizes, contrast plots compare groups, distribution plots reveal score patterns. function returns structured list containing: Overall: Effect sizes p-values variable. Contrasts: Pairwise comparisons categorical variables. plot: combined visualization summarizing results. plot_contrasts, plot_overall, plot_distributions: Individual plots exploration. approach allows users quickly identify potential relationships scores predictor variables, guiding analysis. approach requires user analysing specific method score calculation gene signature. illustration purposes, go logmedian method compare two signatures Senescence, using mode=extensive.","code":"options(error=recover) results_scoreassoc_bidirect <- Score_VariableAssociation(data = counts_example,                            metadata = metadata_example,                            cols = c(\"Condition\",\"person\",\"days\"),                            method=\"logmedian\",                            gene_set = list(Senescence = SimpleSenescenceSignature ),                           mode=\"extensive\",                           nonsignif_color = \"white\", signif_color = \"red\", saturation_value=NULL,sig_threshold = 0.05,                           widthlabels=30, labsize=10, title=NULL, titlesize=14, pointSize=5, discrete_colors=NULL,                           continuous_color = \"#8C6D03\", color_palette = \"Set2\") results_scoreassoc_bidirect$Overall #>    Variable    Cohen_f      P_Value #> 1 Condition 1.06180763 1.506777e-07 #> 2    person 0.12648382 7.514973e-01 #> 3      days 0.01324252 9.362331e-01 results_scoreassoc_bidirect$Contrasts #>    Variable                  Contrast          Group1           Group2 #> 1 Condition Proliferative - Senescent   Proliferative        Senescent #> 2    person                Ana - John             Ana             John #> 3    person           Ana - Francisca             Ana        Francisca #> 4    person          Francisca - John       Francisca             John #> 5    person  Ana - (Francisca + John)             Ana Francisca + John #> 6    person  (Ana + Francisca) - John Ana + Francisca             John #> 7    person  (Ana + John) - Francisca      Ana + John        Francisca #>        CohenD       PValue         padj #> 1  2.07459395 1.506777e-07 1.054744e-06 #> 2  0.04500138 9.210884e-01 9.210884e-01 #> 3 -0.23159722 5.182369e-01 8.332768e-01 #> 4  0.26842164 5.641611e-01 8.332768e-01 #> 5 -0.14831958 6.487018e-01 8.332768e-01 #> 6  0.15396594 7.142373e-01 8.332768e-01 #> 7 -0.25123032 4.501287e-01 8.332768e-01 results_scoreassoc_bidirect <- Score_VariableAssociation(data = counts_example,                            metadata = metadata_example,                            cols = c(\"Condition\",\"person\",\"days\"),                            method=\"logmedian\",                            gene_set = list(Senescence_Bidirectional = SimpleSenescenceSignature_bidirectional),                           mode=\"extensive\",                           nonsignif_color = \"white\", signif_color = \"red\", saturation_value=NULL,sig_threshold = 0.05,                           widthlabels=30, labsize=10, title=NULL, titlesize=14, pointSize=5, discrete_colors=NULL,                           continuous_color = \"#8C6D03\", color_palette = \"Set2\") results_scoreassoc_bidirect$Overall #>    Variable    Cohen_f      P_Value #> 1 Condition 1.52736028 3.278479e-11 #> 2    person 0.17329879 5.870614e-01 #> 3      days 0.04759144 7.738244e-01 results_scoreassoc_bidirect$Contrasts #>    Variable                  Contrast          Group1           Group2 #> 1 Condition Proliferative - Senescent   Proliferative        Senescent #> 2    person                Ana - John             Ana             John #> 3    person           Ana - Francisca             Ana        Francisca #> 4    person          Francisca - John       Francisca             John #> 5    person  Ana - (Francisca + John)             Ana Francisca + John #> 6    person  (Ana + Francisca) - John Ana + Francisca             John #> 7    person  (Ana + John) - Francisca      Ana + John        Francisca #>        CohenD       PValue         padj #> 1 -2.98420572 3.278479e-11 2.294935e-10 #> 2  0.19639043 6.661502e-01 8.626076e-01 #> 3  0.39561859 2.729488e-01 6.132382e-01 #> 4 -0.15441156 7.393780e-01 8.626076e-01 #> 5  0.31910742 3.294782e-01 6.132382e-01 #> 6  0.03157417 9.400893e-01 9.400893e-01 #> 7  0.31127790 3.504218e-01 6.132382e-01"},{"path":[]},{"path":"https://diseasetranscriptomicslab.github.io/markeR/index.html","id":"differentially-expressed-genes","dir":"","previous_headings":"Example > Enrichment-Based Methods","what":"Differentially Expressed Genes","title":"An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers","text":"calculateDE function markeR package leverages limma framework compute differential gene expression statistics raw count data. function highly flexible supports several modes operation depending user’s experimental design. examples , illustrate three common scenarios: Automatic Design Matrix Contrasts: first example, design matrix built automatically metadata using specified variable (, \"Condition\"). contrast (case, “Senescent - Proliferative\") applied extract differential expression statistics two conditions. ideal simple design want quickly compute contrasts without manually creating design matrix. Custom Model Formula Coefficient Extraction: second example demonstrates supply custom model formula (e.g., ~Condition) directly function. allows fine control design, can specify coefficients want extract fitted model. approach particularly useful complex designs wish extract multiple statistics single model. can leave parameter \"Contrast\" NULL, function return coefficients (.e. performing contrasts). Providing Externally Constructed Design Matrix: third example, create design matrix externally usingmodel.matrix() (instance, intercept using ~0 + Condition). supplying design matrix directly calculateDE, full control construction. contrast applied obtain desired differential expression results. method recommended require complete customization design matrix pre-processed design externally. can leave parameter \"Contrast\" NULL, function return possible coefficients based design matrix alone. corresponding code snippets demonstrating scenario, answering question: genes differentially expressed senescence proliferative cells? running differential expression analysis (example, using calculateDE function), can visualize results plotVolcano function. function provides flexible interface exploring data allowing : Plot Differentially Expressed Genes: Display volcano plot chosen statistics (e.g., log fold-change x-axis –log₁₀ adjusted p-value y-axis). Color Interesting Genes: Highlight genes pass user-specified thresholds adjusting threshold_y /threshold_x. Annotate Top Bottom N Genes: Optionally, label top (bottom) N genes based chosen statistic quickly identify significant genes. Highlight Gene Signatures: user provide list gene signatures using genes argument, function can highlight genes plot. user can also specify distinct colors upregulated downregulated direction known, color genes don’t defined direction. example usage simply plots differential expression results (default settings). example, thresholds gene signatures specified, function produces basic volcano plot based DEResultsList.","code":"# Example 1: Build design matrix from variables (Condition) and apply a contrast. # In this case, the design matrix is constructed automatically using the variable \"Condition\". DEGs <- calculateDE(data = counts_example,                     metadata = metadata_example,                     variables = \"Condition\",                     contrasts = c(\"Senescent - Proliferative\")) DEGs$`Senescent - Proliferative`[1:5,] #> NULL  # Example 2: Use a custom model formula. # Here, a model formula is provided (as a string that will be converted to a formula). # Specific coefficients are extracted. # because we are using one of the conditions as the baseline, the other one will give the difference between the two DEGs2 <- calculateDE(data = counts_example,                      metadata = metadata_example,                      variables = NULL,                      lmexpression = \"~Condition\",                      contrasts = c(\"Senescent\"))  DEGs2$`Senescent`[1:5,] #>            logFC  AveExpr         t      P.Value    adj.P.Val        B #> CCND2   3.816674 4.406721 12.393130 2.747202e-15 2.435712e-12 24.70982 #> MKI67  -3.581174 6.605339 -9.197510 2.007135e-11 4.992097e-10 15.96203 #> PTCHD4  3.398914 3.556007 10.740867 2.318137e-13 3.002118e-11 20.35906 #> KIF20A -3.365481 5.934893 -9.728709 4.176398e-12 1.844336e-10 17.51106 #> CDC20  -3.304602 6.104079 -9.801724 3.375212e-12 1.657492e-10 17.72110  # Example 3: Supply a custom design matrix directly. # Here, the design matrix is created externally (using no intercept, for instance). design <- model.matrix(~0 + Condition, data = metadata_example) colnames(design) <- c(\"Proliferative\",\"Senescent\") DEGs3 <- calculateDE(data = counts_example,                      metadata = NULL,                      variables = NULL,                      modelmat = design,                      contrasts = c(\"Senescent - Proliferative\")) DEGs3$`Senescent - Proliferative`[1:5,] #> NULL # Plot Differentially Expressed Genes: plotVolcano(DEGs, genes = NULL, N = NULL,             x = \"logFC\", y = \"-log10(adj.P.Val)\", pointSize = 2,             color = \"#6489B4\", highlightcolor = \"#05254A\", nointerestcolor = \"#B7B7B7\",             threshold_y = NULL, threshold_x = NULL,             xlab = NULL, ylab = NULL, ncol = NULL, nrow = NULL, title = \"Marthandan et al. 2016\",             labsize = 8, widthlabs = 25, invert = FALSE) # Color Interesting Genes: plotVolcano(DEGs, genes = NULL, N = NULL,             x = \"logFC\", y = \"-log10(adj.P.Val)\", pointSize = 2,             color = \"#6489B4\", highlightcolor = \"#05254A\", nointerestcolor = \"#B7B7B7\",             threshold_y = 0.0001, threshold_x = 1,             xlab = NULL, ylab = NULL, ncol = NULL, nrow = NULL, title = \"Marthandan et al. 2016\",             labsize = 8, widthlabs = 25, invert = FALSE) # Annotate Top and Bottom N Genes: plotVolcano(DEGs, genes = NULL, N = 5,             x = \"logFC\", y = \"-log10(adj.P.Val)\", pointSize = 2,             color = \"pink\", highlightcolor = \"#05254A\", nointerestcolor = \"#B7B7B7\",             threshold_y = NULL, threshold_x = NULL,             xlab = NULL, ylab = NULL, ncol = NULL, nrow = NULL, title = \"Marthandan et al. 2016\",             labsize = 8, widthlabs = 25, invert = FALSE) # Change order: signatures in columns, contrast in rows plotVolcano(DEGs, genes = list(Senescence_Bidirectional = SimpleSenescenceSignature_bidirectional,                                Senescence  = SimpleSenescenceSignature),              N = NULL,             x = \"logFC\", y = \"-log10(adj.P.Val)\", pointSize = 2,             color = \"#6489B4\", highlightcolor = \"#05254A\", highlightcolor_upreg = \"#038C65\", highlightcolor_downreg = \"#8C0303\",nointerestcolor = \"#B7B7B7\",             threshold_y = NULL, threshold_x = NULL,             xlab = NULL, ylab = NULL, ncol = NULL, nrow = NULL, title = \"Marthandan et al. 2016\",             labsize = 10, widthlabs = 24, invert = TRUE)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/index.html","id":"note-on-continuous-variables","dir":"","previous_headings":"Example > Enrichment-Based Methods > Differentially Expressed Genes","what":"Note on Continuous Variables","title":"An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers","text":"user wants analyze continuous variables (e.g., time points dosage), use lmexpression argument, instead variables argument. using variablesargument: creates -intercept model, coefficient represents mean expression unique time point. structure intended categorical variables requires contrasts, making unsuitable continuous variables. using lmexpression, user can treat continuous variables , get meaningful gene expression changes variables interest. using lmexpressionargument: - includes automatically intercept, representing baseline expression (.e., expected expression days = 0). - days coefficient reflects much expression changes per unit increase days. usage lmexpression parameter also allows user combine categorical variables numeric variables: Intercept: Baseline expression days = 0 Condition = Control. days: Change expression per unit increase days. `Senescent: Difference expression Senescent Control conditions.","code":"# First example, using the variables argument. # NOT suitable for continuous variables DEGs_continuous <- calculateDE(data = counts_example,                                metadata = metadata_example,                                variables = \"days\") DEGs_continuous$days[1:3,] #>            logFC  AveExpr        t      P.Value    adj.P.Val        B #> FN1    1.0251594 13.21879 12.06817 1.182743e-15 1.802499e-14 25.49668 #> EEF1A1 0.9953702 12.85091 12.02784 1.326991e-15 1.802499e-14 25.38357 #> GAPDH  0.9711606 12.53188 12.03413 1.303370e-15 1.802499e-14 25.40122 DEGs_continuous2 <- calculateDE(data = counts_example,                                 metadata = metadata_example,                                 lmexpression = \"~days\") DEGs_continuous2$`(Intercept)`[1:3,] #>           logFC  AveExpr         t      P.Value    adj.P.Val         B #> FN1    13.19342 13.21879  76.83545 9.957323e-45 3.444421e-44  92.16135 #> EEF1A1 12.88033 12.85091 169.44074 2.735660e-58 1.885454e-56 120.69416 #> GAPDH  12.53905 12.53188 103.11616 9.157787e-50 6.880877e-49 103.27738 DEGs_continuous2$days[1:3,] #>                logFC  AveExpr         t   P.Value adj.P.Val         B #> RNA45SN2 -0.07628608 7.712585 -1.626674 0.1117361 0.9997685 -6.018805 #> RNA18SN2  0.06743439 9.577467  1.554171 0.1280974 0.9997685 -6.129426 #> RNA18SN3  0.06743439 9.577467  1.554171 0.1280974 0.9997685 -6.129426 DEGs_continuous3 <- calculateDE(data = counts_example,                                 metadata = metadata_example,                                 lmexpression = \"~days + Condition\") DEGs_continuous3$`(Intercept)`[1:3,] #>           logFC  AveExpr         t      P.Value    adj.P.Val         B #> FN1    13.23994 13.21879  74.04645 1.265799e-43 3.210740e-43  89.73456 #> EEF1A1 12.94192 12.85091 179.29631 1.402180e-58 9.033979e-57 121.69861 #> GAPDH  12.71139 12.53188 147.86006 2.586838e-55 5.583501e-54 115.21324 DEGs_continuous3$days[1:3,] #>                logFC  AveExpr         t    P.Value adj.P.Val         B #> RNA45SN2 -0.08056063 7.712585 -1.689209 0.09914647 0.9853746 -6.052523 #> RNA18SN2  0.06598991 9.577467  1.490666 0.14407989 0.9853746 -6.355482 #> RNA18SN3  0.06598991 9.577467  1.490666 0.14407989 0.9853746 -6.355482 DEGs_continuous3$Senescent[1:3,] #>            logFC  AveExpr         t      P.Value    adj.P.Val        B #> CCND2   3.863054 4.406721 12.344742 4.643461e-15 4.865503e-12 24.20437 #> MKI67  -3.655159 6.605339 -9.296026 1.907736e-11 5.010329e-10 16.02834 #> PTCHD4  3.453362 3.556007 10.774059 2.907380e-13 3.864144e-11 20.14942"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/index.html","id":"gene-set-enrichment-analyses","dir":"","previous_headings":"Example > Enrichment-Based Methods","what":"Gene Set Enrichment Analyses","title":"An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers","text":"perform GSEA, use runGSEA() function. function takes named list differential expression results (one per contrast) set gene signatures compute enrichment scores. DEGList: list differentially expressed genes (DEGs) contrast. gene_sets: list gene sets, entry can : vector genes (unidirectional analysis). data frame first column gene name second column indicates expected direction (+1 -1, bidirectional analysis). stat: ranking statistic. NULL, ranking statistic automatically selected unless manually specified: \"B\" gene sets known direction (vectors). \"t\" unidirectional bidirectional gene sets (data frames). provided, argument overrides automatic selection. important note column corresponding adjusted p-value (padj) reflects p-values corrected multiple testing Benjamini & Hochberg (BH) method, considering contrasts list differentially expressed genes (DEGsin example ). means contrast different adjusted p-value running different set contrasts, given results represent different research questions. Depending statistic used, interpretation plots changes: using B statistic (default, direction specified), interpretation plot differs T statistic. B statistic focuses whether genes altered altered, without considering whether enriched depleted. B statistic specify direction (enriched depleted) gene set. indicates whether genes altered altered. t statistic orders genes based enrichment depletion. using B statistic, plot include “Altered Pathways” reflect focus whether genes altered. t statistic, plot include “Enriched/Depleted Pathways”, indicating plot focuses enrichment depletion status genes. running GSEA, can visualize enrichment plots using plotGSEAenrichment(). function generates enrichment plots gene signature contrast, displaying also Normalized Enrichment Scores (NES) adjusted p-value enrichment result. grid = TRUE: Arranges plots grid better visualization. titlesize: Adjusts title font size. nrow/ncol: Specifies grid layout arranging plots.  plotNESlollipop() function creates lollipop plots visualizing Gene Set Enrichment Analysis (GSEA) results. plot displays pathways y-axis Normalized Enrichment Scores (NES) x-axis, color representing adjusted p-value. function supports multiple contrasts includes options customizing color gradient, significance threshold, plot layout. can also arrange individual plots grid layout comparative visualization.  plotCombinedGSEA() function generates scatter plot visualize results Gene Set Enrichment Analysis (GSEA) across multiple contrasts. point represents pathway, : X-axis: Normalized Enrichment Score (NES) Y-axis: -log10 adjusted p-value (significance) Color: Pathways Shape: Different contrasts Dashed line: Significance threshold function helps compare enrichment results number contrasts number pathways high. example, might representative.","code":"GSEAresults <- runGSEA(DEGList = DEGs,                         gene_sets = list(Senescence_Bidirectional = SimpleSenescenceSignature_bidirectional,                                         Senescence  = SimpleSenescenceSignature),                        stat = NULL)  GSEAresults #> $`Senescent-Proliferative` #>                     pathway       pval       padj    log2err        ES      NES #>                      <char>      <num>      <num>      <num>     <num>    <num> #> 1: Senescence_Bidirectional 0.01838843 0.03677686 0.15267586 0.7068136 1.653726 #> 2:               Senescence 0.14596611 0.14596611 0.04482895 0.5844505 1.338962 #>     size                         leadingEdge stat_used #>    <int>                              <list>    <char> #> 1:     7 LMNB1,MKI67,GLB1,CDKN1A,CDKN2A,CCL2         t #> 2:     7                         LMNB1,MKI67         B plotGSEAenrichment(GSEA_results=GSEAresults,                     DEGList=DEGs,                     gene_sets=list(Senescence_Bidirectional = SimpleSenescenceSignature_bidirectional,                                   Senescence  = SimpleSenescenceSignature),                     widthTitle=40, grid = T, titlesize = 10, nrow=1, ncol=2) plotNESlollipop(GSEA_results=GSEAresults,                  saturation_value=NULL,                  nonsignif_color = \"#F4F4F4\",                  signif_color = \"red\",                 sig_threshold = 0.05,                  grid = FALSE,                  nrow = NULL, ncol = NULL,                  widthlabels=13,                  title=NULL, titlesize=12)  #> $`Senescent-Proliferative` plotCombinedGSEA(GSEAresults, sig_threshold = 0.05, PointSize=6, widthlegend = 26 )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/index.html","id":"gsea-association-with-chosen-variables","dir":"","previous_headings":"Example > Enrichment-Based Methods","what":"GSEA Association with Chosen Variables","title":"An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers","text":"Following rational presented Score association Chosen Variables, analyzing data, often unclear whether given variable meaningfully associated target score. GSEA module, can particularly relevant assessing whether gene expression patterns align specific biological pathways signatures. GSEA_VariableAssociation function automates process performing differential expression (DE) analysis across possible contrasts categorical variables using linear modeling continuous variables. applies Gene Set Enrichment Analysis (GSEA) evaluate enrichment predefined gene sets, returning numerical results intuitive lollipop plot visualization. approach helps users quickly identify significant associations metadata variables gene expression patterns. Depending statistic used (B- t-statistic): t Statistic: negative NES T statistic indicates gene set depleted (.e., genes -expressed). B Statistic: negative NES using B statistic (significant results) means genes altered, implying significant change expression. dashed lines plot represent B statistic results negative NES, meaning gene sets putatively altered. using B statistic, subtitle plot read “Altered Contrasts” reflect focus whether genes altered. t statistic, subtitle read “Enriched/Depleted Contrasts”, indicating plot focuses enrichment depletion status genes.     📩 questions concerns, feel free reach : Rita Martins-Silva Email: rita.silva@gimm.pt","code":"options(error=recover) GSEA_VariableAssociation(data=counts_example,                           metadata=metadata_example,                           cols=c(\"Condition\",\"person\",\"days\"),                           mode=\"simple\",                           gene_set=list(Senescence  = SimpleSenescenceSignature),                           saturation_value=NULL, nonsignif_color = \"white\", signif_color = \"red\",                          sig_threshold = 0.05, widthlabels=30, labsize=10, titlesize=14, pointSize = 5)  #> $plot #>  #> $data #>       pathway       pval      padj    log2err         ES        NES  size #>        <char>      <num>     <num>      <num>      <num>      <num> <int> #> 1: Senescence 0.14596611 0.4378983 0.04482895  0.5844505  1.3389622     7 #> 2: Senescence 0.81534874 0.8596054 0.01825162  0.2197875  0.7218660     7 #> 3: Senescence 0.12206168 0.7323701 0.05892753  0.4198163  1.3797736     7 #> 4: Senescence 0.85960544 0.8596054 0.01599026 -0.2113031 -0.6810595     7 #> 5: Senescence 0.06299541 0.4378983 0.11671125 -0.4779552 -1.5523084     7 #> 6: Senescence 0.54673591 0.8201039 0.02231638 -0.2849369 -0.9161661     7 #>                                leadingEdge stat_used                  Contrast #>                                     <list>    <char>                    <char> #> 1:                             LMNB1,MKI67         B Proliferative - Senescent #> 2:                        GLB1,TP53,CDKN1A         B                Ana - John #> 3:          LMNB1,CDKN1A,GLB1,CDKN2A,MKI67         B           Ana - Francisca #> 4: CCL2,CDKN1A,MKI67,GLB1,LMNB1,CDKN2A,...         B          Francisca - John #> 5:     LMNB1,MKI67,CCL2,CDKN2A,TP53,CDKN1A         B            intercept_days #> 6:     LMNB1,MKI67,CDKN2A,TP53,CCL2,CDKN1A         B                      days  GSEA_VariableAssociation(data=counts_example,                           metadata=metadata_example,                           cols=c(\"Condition\",\"person\",\"days\"),                           mode=\"simple\",                           gene_set=list(Senescence_Bidirectional = SimpleSenescenceSignature_bidirectional),                           saturation_value=NULL, nonsignif_color = \"white\", signif_color = \"red\",                          sig_threshold = 0.05, widthlabels=30, labsize=10, titlesize=14, pointSize = 5)  #> $plot #>  #> $data #>                     pathway        pval       padj    log2err         ES #>                      <char>       <num>      <num>      <num>      <num> #> 1: Senescence_Bidirectional 0.023760331 0.07128099 0.13405093 -0.7068136 #> 2: Senescence_Bidirectional 0.077863457 0.23359037 0.06946518  0.6399995 #> 3: Senescence_Bidirectional 0.006124402 0.07128099 0.25663502  0.7274186 #> 4: Senescence_Bidirectional 0.949172812 0.94917281 0.01513268 -0.2471009 #> 5: Senescence_Bidirectional 0.173793103 0.38632616 0.08982029 -0.4165066 #> 6: Senescence_Bidirectional 0.321938468 0.38632616 0.03305031  0.4899121 #>           NES  size                         leadingEdge stat_used #>         <num> <int>                              <list>    <char> #> 1: -1.6491022     7 LMNB1,MKI67,GLB1,CDKN1A,CDKN2A,CCL2         t #> 2:  1.4615936     7                    GLB1,TP53,CDKN1A         t #> 3:  1.7675900     7      LMNB1,CDKN1A,GLB1,CDKN2A,MKI67         t #> 4: -0.5727763     7                  CDKN2A,LMNB1,MKI67         t #> 5: -1.2553035     7 MKI67,LMNB1,CCL2,CDKN2A,TP53,CDKN1A         t #> 6:  1.1260283     7 GLB1,CDKN1A,CCL2,CDKN2A,MKI67,LMNB1         t #>                     Contrast #>                       <char> #> 1: Proliferative - Senescent #> 2:                Ana - John #> 3:           Ana - Francisca #> 4:          Francisca - John #> 5:            intercept_days #> 6:                      days GSEA_VariableAssociation(data=counts_example,                           metadata=metadata_example,                           cols=c(\"Condition\",\"person\",\"days\"),                           mode=\"extensive\",                           gene_set=list(Senescence  = SimpleSenescenceSignature),                         saturation_value=NULL, nonsignif_color = \"white\", signif_color = \"red\",                          sig_threshold = 0.05, widthlabels=30, labsize=10, titlesize=14, pointSize = 5)  #> $plot #>  #> $data #>       pathway       pval      padj    log2err         ES        NES  size #>        <char>      <num>     <num>      <num>      <num>      <num> <int> #> 1: Senescence 0.14596611 0.6568475 0.04482895  0.5844505  1.3389622     7 #> 2: Senescence 0.81534874 0.9002970 0.01825162  0.2197875  0.7218660     7 #> 3: Senescence 0.12206168 0.9002970 0.05892753  0.4198163  1.3797736     7 #> 4: Senescence 0.85960544 0.9002970 0.01599026 -0.2113031 -0.6810595     7 #> 5: Senescence 0.13754081 0.9002970 0.05556785  0.4091501  1.3460917     7 #> 6: Senescence 0.72727273 0.9002970 0.01830571 -0.2423185 -0.7803526     7 #> 7: Senescence 0.90029699 0.9002970 0.01680350  0.1962844  0.6451577     7 #> 8: Senescence 0.06299541 0.6568475 0.11671125 -0.4779552 -1.5523084     7 #> 9: Senescence 0.54673591 0.9002970 0.02231638 -0.2849369 -0.9161661     7 #>                                leadingEdge stat_used                   Contrast #>                                     <list>    <char>                     <char> #> 1:                             LMNB1,MKI67         B  Proliferative - Senescent #> 2:                        GLB1,TP53,CDKN1A         B                 Ana - John #> 3:          LMNB1,CDKN1A,GLB1,CDKN2A,MKI67         B            Ana - Francisca #> 4: CCL2,CDKN1A,MKI67,GLB1,LMNB1,CDKN2A,...         B           Francisca - John #> 5:   GLB1,CDKN1A,LMNB1,MKI67,TP53,CCL2,...         B Ana - (Francisca + John)/2 #> 6:                        MKI67,LMNB1,CCL2         B (Ana + Francisca)/2 - John #> 7: CDKN2A,LMNB1,MKI67,TP53,CDKN1A,CCL2,...         B (Ana + John)/2 - Francisca #> 8:     LMNB1,MKI67,CCL2,CDKN2A,TP53,CDKN1A         B             intercept_days #> 9:     LMNB1,MKI67,CDKN2A,TP53,CCL2,CDKN1A         B                       days  GSEA_VariableAssociation(data=counts_example,                           metadata=metadata_example,                           cols=c(\"Condition\",\"person\",\"days\"),                           mode=\"extensive\",                           gene_set=list(Senescence_Bidirectional = SimpleSenescenceSignature_bidirectional),                           saturation_value=NULL, nonsignif_color = \"white\", signif_color = \"red\",                          sig_threshold = 0.05, widthlabels=30, labsize=10, titlesize=14, pointSize = 5)  #> $plot #>  #> $data #>                     pathway        pval      padj    log2err         ES #>                      <char>       <num>     <num>      <num>      <num> #> 1: Senescence_Bidirectional 0.023760331 0.1653589 0.13405093 -0.7068136 #> 2: Senescence_Bidirectional 0.077863457 0.3503856 0.06946518  0.6399995 #> 3: Senescence_Bidirectional 0.006124402 0.1653589 0.25663502  0.7274186 #> 4: Senescence_Bidirectional 0.949172812 0.9491728 0.01513268 -0.2471009 #> 5: Senescence_Bidirectional 0.018775817 0.1689824 0.14390962  0.6955465 #> 6: Senescence_Bidirectional 0.218617227 0.3784606 0.04038999  0.5527943 #> 7: Senescence_Bidirectional 0.280341218 0.3784606 0.03509657  0.4842608 #> 8: Senescence_Bidirectional 0.173793103 0.3784606 0.08982029 -0.4165066 #> 9: Senescence_Bidirectional 0.321938468 0.3784606 0.03305031  0.4899121 #>           NES  size                           leadingEdge stat_used #>         <num> <int>                                <list>    <char> #> 1: -1.6491022     7   LMNB1,MKI67,GLB1,CDKN1A,CDKN2A,CCL2         t #> 2:  1.4615936     7                      GLB1,TP53,CDKN1A         t #> 3:  1.7675900     7        LMNB1,CDKN1A,GLB1,CDKN2A,MKI67         t #> 4: -0.5727763     7                    CDKN2A,LMNB1,MKI67         t #> 5:  1.6475408     7 GLB1,CDKN1A,LMNB1,MKI67,TP53,CCL2,...         t #> 6:  1.2409060     7                      TP53,GLB1,CDKN1A         t #> 7:  1.1683551     7        CDKN2A,LMNB1,MKI67,CDKN1A,CCL2         t #> 8: -1.2553035     7   MKI67,LMNB1,CCL2,CDKN2A,TP53,CDKN1A         t #> 9:  1.1260283     7   GLB1,CDKN1A,CCL2,CDKN2A,MKI67,LMNB1         t #>                      Contrast #>                        <char> #> 1:  Proliferative - Senescent #> 2:                 Ana - John #> 3:            Ana - Francisca #> 4:           Francisca - John #> 5: Ana - (Francisca + John)/2 #> 6: (Ana + Francisca)/2 - John #> 7: (Ana + John)/2 - Francisca #> 8:             intercept_days #> 9:                       days"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/AUC_Scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Heatmaps for AUC Scores using ggplot2 — AUC_Scores","title":"Generate Heatmaps for AUC Scores using ggplot2 — AUC_Scores","text":"function computes AUC scores multiple gene signatures scoring methods, generates heatmap gene signature. heatmap displays AUC scores, contrasts rows methods columns. heatmaps arranged grid layout.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/AUC_Scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Heatmaps for AUC Scores using ggplot2 — AUC_Scores","text":"","code":"AUC_Scores(   data,   metadata,   gene_sets,   method = c(\"logmedian\", \"ssGSEA\", \"ranking\", \"all\"),   mode = c(\"simple\", \"medium\", \"extensive\"),   variable,   nrow = NULL,   ncol = NULL,   limits = NULL,   widthTitle = 22,   titlesize = 12,   ColorValues = c(\"#F9F4AE\", \"#B44141\"),   title = NULL )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/AUC_Scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Heatmaps for AUC Scores using ggplot2 — AUC_Scores","text":"data data frame gene expression data genes rows samples columns. Row names contain gene names column names sample identifiers. metadata data frame sample metadata. first column must contain sample identifiers matching data. gene_sets named list gene sets. method character string specifying scoring method(s) (\"logmedian\", \"ssGSEA\", \"ranking\", \"\"). mode string specifying level detail contrasts. Options : \"simple\": Pairwise comparisons (e.g., - B). \"medium\": Pairwise comparisons plus comparisons mean groups. \"extensive\": possible groupwise contrasts, ensuring balance number terms side. variable string specifying grouping variable metadata used computing AUC comparisons. nrow Optional. integer specifying number rows heatmap grid. NULL, number rows computed automatically. ncol Optional. integer specifying number columns heatmap grid. NULL, number columns computed automatically. limits Optional. numeric vector length 2 specifying color scale limits (e.g., c(min, max)). NULL, limits determined data. widthTitle integer specifying width used wrapping gene set signature names heatmap titles. Default 22. titlesize integer specifying text size heatmap titles. Default 12. ColorValues character vector specifying colors gradient fill heatmaps. Default c(\"#F9F4AE\", \"#B44141\"). title Title grid plots.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/AUC_Scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Heatmaps for AUC Scores using ggplot2 — AUC_Scores","text":"list two elements: plt combined heatmap arranged grid using ggpubr::ggarrange. data list containing AUC scores gene signature, computed ROCAUC_Scores_Calculate.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/AUC_Scores.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Heatmaps for AUC Scores using ggplot2 — AUC_Scores","text":"function first calculates AUC scores gene signature using ROCAUC_Scores_Calculate. resulting matrices converted long format cell heatmap can display AUC value. title heatmap dynamically created. heatmaps adjusted display axis text ticks left-column bottom row, combined grid layout. neither nrow ncol specified, layout automatically determined best approximate square grid.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/AUC_Scores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Heatmaps for AUC Scores using ggplot2 — AUC_Scores","text":"","code":"if (FALSE) { # \\dontrun{   result <- AUC_Scores(     data = gene_data,     metadata = sample_metadata,     gene_sets = gene_sets,     method = \"ssGSEA\",     variable = \"Condition\",     nrow = 2,     ncol = 3,     limits = c(0, 1),     widthTitle = 30,     titlesize = 14,     ColorValues = c(\"#F9F4AE\", \"#B44141\")   )   print(result$plt) } # }"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Gene Signature Scores using Score-Based Approaches — CalculateScores","title":"Calculate Gene Signature Scores using Score-Based Approaches — CalculateScores","text":"function calculates gene signature score sample based one predefined gene sets (signatures).","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Gene Signature Scores using Score-Based Approaches — CalculateScores","text":"","code":"CalculateScores(   data,   metadata,   gene_sets,   method = c(\"ssGSEA\", \"logmedian\", \"ranking\", \"all\") )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Gene Signature Scores using Score-Based Approaches — CalculateScores","text":"data data frame normalized (non-transformed) counts row gene column sample. row names contain gene names, column names contain sample identifiers. (Required) metadata data frame describing attributes sample. row corresponds sample column attribute. first column metadata sample identifiers (.e., column names data). Defaults NULL metadata provided. gene_sets Gene set input. (Required) using unidirectional gene sets, provide named list element vector gene names representing gene signature. names list elements correspond labels signature. using bidirectional gene sets, provide named list element data frame. names list elements correspond labels signature, data frame contain following structure: first column contain gene names. second column indicate expected direction enrichment (1 upregulated genes, -1 downregulated genes). method character string indicating scoring method use. Options \"ssGSEA\", \"logmedian\", \"ranking\", \"\" (compute scores using methods). Defaults \"logmedian\".","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Gene Signature Scores using Score-Based Approaches — CalculateScores","text":"single method chosen, data frame containing calculated scores gene signature, including metadata provided. method = \"\", list returned element corresponds scoring method contains respective data frame scores. sample sample identifier (matching column names input data). score calculated gene signature score corresponding sample. (metadata) additional columns metadata data frame provided user, available.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Gene Signature Scores using Score-Based Approaches — CalculateScores","text":"ssGSEA Uses single-sample Gene Set Enrichment Analysis (ssGSEA) method compute enrichment score signature sample. method uses adaptation gsva() function GSVA package compute enrichment score, representing absolute enrichment gene set sample. logmedian Computes, sample, score sum normalized (log2-median-centered) expression values signature genes divided number genes signature. ranking Computes gene signature scores sample ranking expression signature genes dataset normalizing score based total number genes. Computes gene signature scores using three methods (ssGSEA, logmedian, ranking). function returns list containing results method.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Gene Signature Scores using Score-Based Approaches — CalculateScores","text":"","code":"if (FALSE) { # \\dontrun{   # Assume 'gene_data' is your gene expression data frame and 'sample_metadata'   # is your metadata. Define a list of gene signatures as follows:   gene_sets <- list(     \"Signature_A\" = c(\"Gene1\", \"Gene5\", \"Gene10\", \"Gene20\"),     \"Signature_B\" = c(\"Gene2\", \"Gene6\", \"Gene15\", \"Gene30\")   )    # Using the ssGSEA method:   scores_ssgsea <- calculate_signature_score(data = gene_data,                                              metadata = sample_metadata,                                              gene_sets = gene_sets,                                              method = \"ssGSEA\")    # Using the logmedian method (default):   scores_logmedian <- calculate_signature_score(data = gene_data,                                                 gene_sets = gene_sets)    # Using all methods:   scores_all <- calculate_signature_score(data = gene_data,                                           metadata = sample_metadata,                                           gene_sets = gene_sets,                                           method = \"all\") } # }"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_Ranking.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Gene Signature Scores using Ranking Approach — CalculateScores_Ranking","title":"Calculate Gene Signature Scores using Ranking Approach — CalculateScores_Ranking","text":"Computes gene signature scores sample ranking expression signature genes dataset normalizing score based total number genes.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_Ranking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Gene Signature Scores using Ranking Approach — CalculateScores_Ranking","text":"","code":"CalculateScores_Ranking(data, metadata = NULL, gene_sets)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_Ranking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Gene Signature Scores using Ranking Approach — CalculateScores_Ranking","text":"data data frame rows represent genes, columns represent samples, values correspond gene expression levels. (Required) metadata data frame containing sample metadata. first column must contain sample names. (Optional) gene_sets named list gene sets. (Required) Unidirectional gene sets: Provide named list element vector gene names. Bidirectional gene sets: Provide named list element data frame. first column contain gene names. second column indicate expected direction enrichment (1 upregulated genes, -1 downregulated genes).","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_Ranking.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Gene Signature Scores using Ranking Approach — CalculateScores_Ranking","text":"named list data frames, data frame contains: sample: Sample name. score: Normalized ranking score given gene signature. Additional metadata columns (metadata provided).","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_Ranking.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Gene Signature Scores using Ranking Approach — CalculateScores_Ranking","text":"function first validates inputs extracts relevant genes dataset. unidirectional signatures, computes rankings based gene expression levels. bidirectional signatures, computes separate rankings upregulated downregulated genes, calculates final score subtracting downregulated rankings upregulated rankings. final scores normalized dividing total number genes. metric suitable compare absolute values different gene sets, .e. used relative comparisons samples using gene set.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_Ranking.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Gene Signature Scores using Ranking Approach — CalculateScores_Ranking","text":"","code":"# Example dataset with 5 genes (rows) and 3 samples (columns) set.seed(123) data <- as.data.frame(matrix(runif(15, 1, 100), nrow = 5, ncol = 3)) rownames(data) <- paste0(\"Gene_\", 1:5) colnames(data) <- paste0(\"Sample_\", 1:3)  # Unidirectional gene set example gene_sets <- list(Signature1 = c(\"Gene_1\", \"Gene_3\", \"Gene_5\"))  # Compute scores scores <- CalculateScores_Ranking(data, gene_sets = gene_sets) #> Considering unidirectional gene signature mode for signature Signature1 print(scores) #> $Signature1 #>     sample score #> 1 Sample_1   1.6 #> 2 Sample_2   1.6 #> 3 Sample_3   2.0 #>"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_logmedian.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Gene Signature Scores using Log-Median Approach — CalculateScores_logmedian","title":"Calculate Gene Signature Scores using Log-Median Approach — CalculateScores_logmedian","text":"Computes log2-median-centered scores sample based gene signature expression.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_logmedian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Gene Signature Scores using Log-Median Approach — CalculateScores_logmedian","text":"","code":"CalculateScores_logmedian(data, metadata = NULL, gene_sets)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_logmedian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Gene Signature Scores using Log-Median Approach — CalculateScores_logmedian","text":"data data frame normalized counts row gene column sample. metadata data frame containing sample metadata (optional). provided, resulting scores merged metadata. gene_sets named list representing gene sets. (Required) Unidirectional gene sets: element vector gene names representing signature. names list elements serve labels signatures. Bidirectional gene sets: element data frame : first column containing gene names. second column specifying expected direction enrichment: 1 upregulated genes. -1 downregulated genes.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_logmedian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Gene Signature Scores using Log-Median Approach — CalculateScores_logmedian","text":"list data frames containing log-median scores signature. metadata provided, merged scores.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_logmedian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Gene Signature Scores using Log-Median Approach — CalculateScores_logmedian","text":"","code":"if (FALSE) { # \\dontrun{ data <- matrix(rnorm(1000), nrow = 100, ncol = 10) colnames(data) <- paste0(\"Sample_\", 1:10) rownames(data) <- paste0(\"Gene_\", 1:100) gene_sets <- list(   Signature_A = sample(rownames(data), 10),   Signature_B = data.frame(Gene = sample(rownames(data), 10), Direction =   sample(c(1, -1), 10, replace = TRUE)) ) scores <- CalculateScores_logmedian(data, gene_sets = gene_sets) } # }"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_ssGSEA.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Gene Signature Scores using ssGSEA — CalculateScores_ssGSEA","title":"Calculate Gene Signature Scores using ssGSEA — CalculateScores_ssGSEA","text":"Computes enrichment score gene signature sample using single-sample Gene Set Enrichment Analysis (ssGSEA).","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_ssGSEA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Gene Signature Scores using ssGSEA — CalculateScores_ssGSEA","text":"","code":"CalculateScores_ssGSEA(data, metadata = NULL, gene_sets)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_ssGSEA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Gene Signature Scores using ssGSEA — CalculateScores_ssGSEA","text":"data data frame normalized (non-transformed) counts row gene column sample. metadata data frame containing sample metadata (optional). gene_sets Gene set input. (Required) using unidirectional gene sets, provide named list element vector gene names representing gene signature. names list elements correspond labels signature. using bidirectional gene sets, provide named list element data frame. names list elements correspond labels signature, data frame contain following structure: first column contain gene names. second column indicate expected direction enrichment (1 upregulated genes, -1 downregulated genes).","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_ssGSEA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Gene Signature Scores using ssGSEA — CalculateScores_ssGSEA","text":"list data frames containing ssGSEA scores signature.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_ssGSEA_bidirectional.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate ssGSEA Scores for Bidirectional Gene Signatures — CalculateScores_ssGSEA_bidirectional","title":"Calculate ssGSEA Scores for Bidirectional Gene Signatures — CalculateScores_ssGSEA_bidirectional","text":"Computes single-sample Gene Set Enrichment Analysis (ssGSEA) scores sample using bidirectional gene signature (separating upregulated downregulated genes).","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_ssGSEA_bidirectional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate ssGSEA Scores for Bidirectional Gene Signatures — CalculateScores_ssGSEA_bidirectional","text":"","code":"CalculateScores_ssGSEA_bidirectional(data, signature)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_ssGSEA_bidirectional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate ssGSEA Scores for Bidirectional Gene Signatures — CalculateScores_ssGSEA_bidirectional","text":"data data frame normalized (non-transformed) counts rows genes columns samples. signature data frame : first column containing gene names. second column (Signal) indicating expected direction enrichment (1 upregulated genes, -1 downregulated genes).","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_ssGSEA_bidirectional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate ssGSEA Scores for Bidirectional Gene Signatures — CalculateScores_ssGSEA_bidirectional","text":"data frame containing: sample: Sample name. score: Final ssGSEA enrichment score (computed difference upregulated downregulated scores).","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_ssGSEA_bidirectional.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate ssGSEA Scores for Bidirectional Gene Signatures — CalculateScores_ssGSEA_bidirectional","text":"input gene expression matrix (data) log2-transformed applying ssGSEA. Upregulated downregulated genes analyzed separately. upregulated downregulated genes present, final score computed : $$score = (score_{} \\* \\frac{|\\_genes|}{|total\\_genes|}) - (score_{} \\* \\frac{|\\_genes|}{|total\\_genes|})$$ downregulated genes present, upregulated score used. results reshaped long-format data frame one score per sample.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_ssGSEA_bidirectional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate ssGSEA Scores for Bidirectional Gene Signatures — CalculateScores_ssGSEA_bidirectional","text":"","code":"# Example dataset with 5 genes (rows) and 3 samples (columns) set.seed(123) data <- matrix(runif(15, 1, 100), nrow = 5, ncol = 3) rownames(data) <- paste0(\"Gene_\", 1:5) colnames(data) <- paste0(\"Sample_\", 1:3)  # Define a bidirectional gene signature signature <- data.frame(Gene = c(\"Gene_1\", \"Gene_3\", \"Gene_5\"),                         Signal = c(1, -1, 1))  # Compute scores scores <- CalculateScores_ssGSEA_bidirectional(data, signature = signature) #> No id variables; using all as measure variables #> No id variables; using all as measure variables print(scores) #>     sample       score #> 1 Sample_1  0.13626902 #> 2 Sample_2 -0.49423818 #> 3 Sample_3 -0.03039764"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_ssGSEA_unidirectional.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate ssGSEA Scores for Unidirectional Gene Signatures — CalculateScores_ssGSEA_unidirectional","title":"Calculate ssGSEA Scores for Unidirectional Gene Signatures — CalculateScores_ssGSEA_unidirectional","text":"Computes single-sample Gene Set Enrichment Analysis (ssGSEA) scores sample using unidirectional gene signature.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_ssGSEA_unidirectional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate ssGSEA Scores for Unidirectional Gene Signatures — CalculateScores_ssGSEA_unidirectional","text":"","code":"CalculateScores_ssGSEA_unidirectional(data, signature)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_ssGSEA_unidirectional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate ssGSEA Scores for Unidirectional Gene Signatures — CalculateScores_ssGSEA_unidirectional","text":"data data frame normalized (non-transformed) counts rows genes columns samples. signature vector gene names representing unidirectional gene signature.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_ssGSEA_unidirectional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate ssGSEA Scores for Unidirectional Gene Signatures — CalculateScores_ssGSEA_unidirectional","text":"data frame containing: sample: Sample name. score: ssGSEA enrichment score gene signature.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CalculateScores_ssGSEA_unidirectional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate ssGSEA Scores for Unidirectional Gene Signatures — CalculateScores_ssGSEA_unidirectional","text":"","code":"# Example dataset with 5 genes (rows) and 3 samples (columns) set.seed(123) data <- matrix(runif(15, 1, 100), nrow = 5, ncol = 3) rownames(data) <- paste0(\"Gene_\", 1:5) colnames(data) <- paste0(\"Sample_\", 1:3)  # Define a unidirectional gene signature signature <- c(\"Gene_1\", \"Gene_3\", \"Gene_5\")  # Compute scores scores <- CalculateScores_ssGSEA_unidirectional(data, signature = signature) #> No id variables; using all as measure variables print(scores) #>     sample      score #> 1 Sample_1 -0.1107752 #> 2 Sample_2 -0.1107752 #> 3 Sample_3  0.2230271"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CohenD_IndividualGenes.html","id":null,"dir":"Reference","previous_headings":"","what":"Cohen's d Heatmap Function — CohenD_IndividualGenes","title":"Cohen's d Heatmap Function — CohenD_IndividualGenes","text":"function computes Cohen's d gene based gene expression data sample metadata. gene, compares expression values samples condition_var equals class (positive class) versus remaining samples. resulting effect sizes visualized heatmap.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CohenD_IndividualGenes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cohen's d Heatmap Function — CohenD_IndividualGenes","text":"","code":"CohenD_IndividualGenes(   data,   metadata,   genes = NULL,   condition_var,   class,   group_var = NULL,   title = NULL,   widthTitle = 16,   heatmap_params = list() )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CohenD_IndividualGenes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cohen's d Heatmap Function — CohenD_IndividualGenes","text":"data data frame matrix containing gene expression data, genes rows samples columns. metadata data frame containing sample metadata. first column contain sample identifiers match column names data. genes character vector specifying genes include. NULL (default), genes data used. warning issued 30 genes selected. condition_var character string specifying column name metadata representing condition interest. (Mandatory; default.) class character string vector specifying positive class label condition. (Mandatory; default.) group_var optional character string specifying column name metadata used grouping samples. provided (NULL), samples treated single group. title optional character string specifying custom title heatmap. provided, default title generated. widthTitle numeric value used wrapping title. Default 16. heatmap_params list additional parameters customizing heatmap. Possible elements include: cluster_rows Logical; TRUE (default), rows clustered. cluster_columns Logical; TRUE (default), columns clustered. col vector length 2 colors used minimum maximum values color scale. Defaults c(\"#FFFFFF\", \"#21975C\"), note default mapping Cohen's d set divergent scale. limits numeric vector length 2 specifying minimum maximum values color scale. provided, defaults c(-2, 2). name character string legend title color scale. Default \"Cohen's d\". row_names_gp Optional graphical parameters row names (passed ComplexHeatmap). column_names_gp Optional graphical parameters column names (passed ComplexHeatmap).","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CohenD_IndividualGenes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cohen's d Heatmap Function — CohenD_IndividualGenes","text":"Invisibly returns list containing: plot ComplexHeatmap object Cohen's d heatmap. data data frame calculated Cohen's d values gene group.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CohenD_IndividualGenes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cohen's d Heatmap Function — CohenD_IndividualGenes","text":"function computes Cohen's d gene comparing expression values samples condition_var == class . effect sizes visualized heatmap using ComplexHeatmap. group_var provided, samples treated single group.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CohenD_IndividualGenes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cohen's d Heatmap Function — CohenD_IndividualGenes","text":"","code":"if (FALSE) { # \\dontrun{   result <- CohenDHeatmap(data = myData,                           metadata = myMetadata,                           genes = c(\"Gene1\", \"Gene2\", \"Gene3\"),                           condition_var = \"Genotype\",                           class = \"Mutant\",                           group_var = \"CellType\",                           title = \"Cohen's d Heatmap\",                           heatmap_params = list(limits = c(-2, 2))) } # }"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CohenD_allConditions.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Cohen\\'s d for All Gene Signatures Across Conditions — CohenD_allConditions","title":"Compute Cohen\\'s d for All Gene Signatures Across Conditions — CohenD_allConditions","text":"Computes Cohen\\'s d effect sizes corresponding p-values gene signatures using scores calculated various methods. function first computes gene signature scores using CalculateScores \"\" option, flattens results, computes pairwise comparisons specified grouping variable.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CohenD_allConditions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Cohen\\'s d for All Gene Signatures Across Conditions — CohenD_allConditions","text":"","code":"CohenD_allConditions(   data,   metadata,   gene_sets,   variable,   mode = c(\"simple\", \"medium\", \"extensive\") )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CohenD_allConditions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Cohen\\'s d for All Gene Signatures Across Conditions — CohenD_allConditions","text":"data data frame gene expression data, genes rows samples columns. metadata data frame containing sample metadata. first column contain sample identifiers matching column names data. gene_sets named list gene sets. unidirectional gene sets, element vector gene names; bidirectional gene sets, element data frame first column contains gene names second column indicates expected direction (1 upregulated, -1 downregulated). variable string specifying grouping variable metadata used compare scores conditions. mode string specifying level detail contrasts. Options : \"simple\": Pairwise comparisons (e.g., - B). \"medium\": Pairwise comparisons plus comparisons mean groups. \"extensive\": possible groupwise contrasts, ensuring balance number terms side.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CohenD_allConditions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Cohen\\'s d for All Gene Signatures Across Conditions — CohenD_allConditions","text":"named list element corresponds gene signature. signature element list three components: CohenD data frame rows methods columns group contrasts (formatted \\\"Group1:Group2\\\"), containing computed Cohen\\'s d effect sizes. PValue data frame structure CohenD containing corresponding p-values. padj data frame structure PValue containing corresponding p-values corrected using BH method, signatures contrasts, method.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CohenD_allConditions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Cohen\\'s d for All Gene Signatures Across Conditions — CohenD_allConditions","text":"","code":"if (FALSE) { # \\dontrun{   # Assume gene_data is your gene expression data frame, sample_metadata is your metadata, and   # gene_sets is a named list of gene sets.   results <- CohenD_allConditions(data = gene_data, metadata = sample_metadata,                                   gene_sets = gene_sets, variable = \"Condition\")   # Access Cohen's d for a specific signature:   results$Signature_A$CohenD } # }"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CohenF_allConditions.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Cohen's f for All Gene Signatures Across a Categorical Variable — CohenF_allConditions","title":"Compute Cohen's f for All Gene Signatures Across a Categorical Variable — CohenF_allConditions","text":"Computes Cohen's f effect sizes corresponding p-values gene signatures using scores calculated multiple methods. function first computes gene signature scores using CalculateScores \"\" option, flattens results, fits linear models using specified variable estimate effect sizes.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CohenF_allConditions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Cohen's f for All Gene Signatures Across a Categorical Variable — CohenF_allConditions","text":"","code":"CohenF_allConditions(data, metadata, gene_sets, variable)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CohenF_allConditions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Cohen's f for All Gene Signatures Across a Categorical Variable — CohenF_allConditions","text":"data data frame gene expression data, genes rows samples columns. metadata data frame containing sample metadata. first column contain sample identifiers matching column names data. gene_sets named list gene sets. unidirectional gene sets, element vector gene names; bidirectional gene sets, element data frame first column contains gene names second column indicates expected direction (1 upregulated, -1 downregulated). variable string specifying categorical variable metadata used model gene signature scores.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CohenF_allConditions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Cohen's f for All Gene Signatures Across a Categorical Variable — CohenF_allConditions","text":"named list element corresponds gene signature. signature element list three components: CohenF data frame rows scoring methods columns variable used linear model (usually one column), containing computed Cohen's f effect size. PValue data frame corresponding raw p-values linear model method. padj data frame adjusted p-values (Benjamini-Hochberg method) across signatures contrasts, per method.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CohenF_allConditions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Cohen's f for All Gene Signatures Across a Categorical Variable — CohenF_allConditions","text":"function designed use categorical variables, goal evaluate overall group effect (e.g., using ANOVA) across multiple levels.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CorrelationHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"CorrelationHeatmap: Generate correlation heatmaps with optional grouping — CorrelationHeatmap","title":"CorrelationHeatmap: Generate correlation heatmaps with optional grouping — CorrelationHeatmap","text":"function generates correlation heatmaps using ComplexHeatmap package. allows users compute correlation matrices set genes visualize heatmap. grouping variable provided (separate.), multiple heatmaps created, corresponding different level grouping variable.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CorrelationHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CorrelationHeatmap: Generate correlation heatmaps with optional grouping — CorrelationHeatmap","text":"","code":"CorrelationHeatmap(   data,   metadata = NULL,   genes,   separate.by = NULL,   method = \"pearson\",   colorlist = list(low = \"blue\", mid = \"white\", high = \"red\"),   limits_colorscale = NULL,   widthTitle = 16,   title = NULL,   cluster_rows = TRUE,   cluster_columns = TRUE,   detailedresults = FALSE,   legend_position = c(\"right\", \"top\"),   titlesize = 20 )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CorrelationHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CorrelationHeatmap: Generate correlation heatmaps with optional grouping — CorrelationHeatmap","text":"data numeric counts data frame rows correspond genes columns samples. metadata data frame containing metadata. Required separate.specified. genes character vector gene names included correlation analysis. separate.character string specifying column metadata separate heatmaps (e.g., \"Condition\"). method Correlation method: \"pearson\" (default), \"spearman\", \"kendall\". colorlist named list specifying colors heatmap (low, mid, high), corresponding limits colorscale. limits_colorscale numeric vector length 3 defining limits color scale (default: min, 0, max). widthTitle Numeric value controlling width plot title. Default 16. title string specifying main title heatmap(s). cluster_rows Logical; whether cluster rows (default = TRUE). cluster_columns Logical; whether cluster columns (default = TRUE). detailedresults Logical; TRUE, additional analysis results stored output list (default = FALSE). legend_position Character; position legend (\"right\" - default - \"top\"). titlesize Numeric; font size heatmap title (default = 20).","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CorrelationHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CorrelationHeatmap: Generate correlation heatmaps with optional grouping — CorrelationHeatmap","text":"list containing: data Correlation matrices condition (single matrix separate.= NULL). plot generated heatmap object(s). aux list containing additional analysis results detailedresults = TRUE. separate.specified: list element corresponds different condition. sublist contains: method: correlation method used. corrmatrix: computed correlation matrix condition. metadata: subset metadata corresponding condition. heatmap: ComplexHeatmap object drawn. separate.= NULL (single heatmap case): list containing: method: correlation method. corrmatrix: computed correlation matrix.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/CorrelationHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CorrelationHeatmap: Generate correlation heatmaps with optional grouping — CorrelationHeatmap","text":"","code":"if (FALSE) { # \\dontrun{ data_matrix <- matrix(rnorm(100), nrow = 10, ncol = 10) rownames(data_matrix) <- paste0(\"Gene\", 1:10) colnames(data_matrix) <- paste0(\"Sample\", 1:10)  # Basic usage result <- CorrelationHeatmap2(data_matrix, genes = rownames(data_matrix))  # Using metadata to separate by condition metadata <- data.frame(Sample = colnames(data_matrix),                        Condition = rep(c(\"A\", \"B\"), each = 5)) result <- CorrelationHeatmap2(data_matrix, metadata, genes = rownames(data_matrix), separate.by = \"Condition\") } # }"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ExpressionHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"ExpressionHeatmap: Generate an expression heatmap with customizable sample annotations and separate legend positions — ExpressionHeatmap","title":"ExpressionHeatmap: Generate an expression heatmap with customizable sample annotations and separate legend positions — ExpressionHeatmap","text":"function creates heatmap Z-score scaled gene expression using ComplexHeatmap package. Genes displayed rows samples columns. color annotation bar added top based specified metadata columns. user can control position heatmap color scale (scale_position) annotation legend (legend_position) independently.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ExpressionHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ExpressionHeatmap: Generate an expression heatmap with customizable sample annotations and separate legend positions — ExpressionHeatmap","text":"","code":"ExpressionHeatmap(   data,   metadata = NULL,   genes,   annotate.by = NULL,   annotation_colors = NULL,   colorlist = list(low = \"blue\", mid = \"white\", high = \"red\"),   cluster_rows = TRUE,   cluster_columns = TRUE,   title = NULL,   titlesize = 20,   scale_position = c(\"right\", \"top\", \"bottom\"),   legend_position = c(\"top\", \"right\", \"bottom\") )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ExpressionHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ExpressionHeatmap: Generate an expression heatmap with customizable sample annotations and separate legend positions — ExpressionHeatmap","text":"data numeric expression matrix rows correspond genes columns samples. metadata data frame containing metadata samples. must contain column named \"Sample\" sample IDs matching column names data. genes character vector gene names include heatmap. annotate.character vector metadata column names used sample annotations (e.g., c(\"Condition\", \"Batch\")). provided, color bar added top. annotation_colors Optional. named list element corresponds annotation variable provides named vector mapping unique level color. provided, default Brewer palettes used. colorlist named list specifying colors heatmap (scaled expression) elements low, mid, high. Default list(low = \"blue\", mid = \"white\", high = \"red\"). cluster_rows Logical; whether cluster rows (default = TRUE). cluster_columns Logical; whether cluster columns (default = TRUE). FALSE, columns reordered based values annotate.. title string specifying main title heatmap. titlesize Numeric; font size heatmap title (default = 20). scale_position character string specifying position heatmap color scale. Options \"right\" (default), \"top\", \"bottom\". scale legend adopt vertical orientation right horizontal top bottom. legend_position character string specifying position annotation legend. Options \"top\" (default), \"right\", \"bottom\".","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ExpressionHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ExpressionHeatmap: Generate an expression heatmap with customizable sample annotations and separate legend positions — ExpressionHeatmap","text":"list containing: data scaled expression matrix (Z-scores). plot generated ComplexHeatmap object.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ExpressionHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ExpressionHeatmap: Generate an expression heatmap with customizable sample annotations and separate legend positions — ExpressionHeatmap","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(123) data_matrix <- matrix(rnorm(100), nrow = 10, ncol = 10) rownames(data_matrix) <- paste0(\"Gene\", 1:10) colnames(data_matrix) <- paste0(\"Sample\", 1:10)  metadata <- data.frame(Sample = colnames(data_matrix),                        Condition = rep(c(\"A\", \"B\"), each = 5),                        Batch = rep(c(\"X\", \"Y\"), times = 5),                        stringsAsFactors = FALSE)  result <- ExpressionHeatmap(data_matrix, metadata, genes = rownames(data_matrix),                             annotate.by = c(\"Condition\", \"Batch\"),                             annotation_colors = list(                               Condition = c(A = \"red\", B = \"blue\"),                               Batch = c(X = \"green\", Y = \"purple\")                             ),                             cluster_columns = FALSE,                             title = \"Expression Heatmap\",                             scale_position = \"right\",                             legend_position = \"top\",                             titlesize = 20)  # To display the heatmap: result$plot } # }"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/FDR_Simulation.html","id":null,"dir":"Reference","previous_headings":"","what":"FDR Simulation Plot — FDR_Simulation","title":"FDR Simulation Plot — FDR_Simulation","text":"function simulates false discovery rates (FDR) generating simulated gene signatures comparing observed effect size values (Cohen's d f) original signatures simulated signatures. effect size computed using three scoring methods (ssGSEA, logmedian, ranking), results visualized violin plots overlaid observed values.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/FDR_Simulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FDR Simulation Plot — FDR_Simulation","text":"","code":"FDR_Simulation(   data,   metadata,   original_signatures,   Variable,   gene_list = NULL,   number_of_sims = 10,   title = NULL,   widthTitle = 30,   titlesize = 12,   pointSize = 2,   labsize = 10,   mode = c(\"none\", \"simple\", \"medium\", \"extensive\"),   ColorValues = NULL,   ncol = NULL,   nrow = NULL )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/FDR_Simulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FDR Simulation Plot — FDR_Simulation","text":"data data frame matrix gene expression values (genes rows, samples columns). metadata data frame containing metadata samples (columns data). original_signatures named list gene signatures. element can either: vector gene names (unidirectional), data frame columns \"Gene\" \"Signal\" bidirectional signatures. Variable column metadata indicating variable interest grouping regression. can categorical numeric. gene_list character vector gene names simulated signatures generated sampling. Default genes data. number_of_sims Integer. Number simulated gene signatures generate per original signature. title Optional title overall plot. widthTitle Integer. Max width wrapping title text (default: 30). titlesize Numeric. Font size title text (default: 12). pointSize Numeric. Size points representing simulations (default: 2). labsize Numeric. Font size axis labels (default: 10). mode Character. Type contrast calculation Variable categorical. Options : \"simple\": basic pairwise contrasts, \"medium\": pairwise + comparisons vs group mean, \"extensive\": possible balanced contrasts, \"none\": Comparing levels Variable (default) ColorValues Named vector colors plot points, typically Original Simulated. NULL, default colors used. ncol Integer. Number columns arranging signature plots grid layout. NULL, layout auto-calculated. nrow Integer. Number rows arranging signature plots grid layout. NULL, layout auto-calculated.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/FDR_Simulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FDR Simulation Plot — FDR_Simulation","text":"Invisibly returns combined ggplot object showing observed vs simulated effect sizes. One violin plot generated per signature contrast. Observed values highlighted compared simulated distribution. Significance (adjusted p-value ≤ 0.05) indicated point shape.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/FDR_Simulation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FDR Simulation Plot — FDR_Simulation","text":"function supports categorical numeric variables: categorical variables, Cohen's d used contrasts defined mode parameter, mode!=none. numeric variables, Cohen's f used quantify associations linear modeling. original gene signature, number simulated signatures created sampling genes gene_list. simulated signature scored using three methods, effect size computed relative variable interest. resulting distributions shown violins, overlaid observed value original signature. red dashed line marks 95th percentile simulated distribution per method. function internally uses CohenD_allConditions() CohenF_allConditions() depending variable type.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/FDR_Simulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FDR Simulation Plot — FDR_Simulation","text":"","code":"if (FALSE) { # \\dontrun{ FDR_Simulation(   data = expression_data,   metadata = sample_metadata,   original_signatures = my_signatures,   Variable = \"condition\",   number_of_sims = 100,   title_for_plot = \"Simulation for FDR\" ) } # }"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/GSEA_VariableAssociation.html","id":null,"dir":"Reference","previous_headings":"","what":"GSEA Variable Association — GSEA_VariableAssociation","title":"GSEA Variable Association — GSEA_VariableAssociation","text":"function assesses association gene expression (another molecular score) metadata variables using differential expression (DE) analysis Gene Set Enrichment Analysis (GSEA). generates possible contrasts categorical variables uses linear modeling continuous variables.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/GSEA_VariableAssociation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GSEA Variable Association — GSEA_VariableAssociation","text":"","code":"GSEA_VariableAssociation(   data,   metadata,   cols,   stat = NULL,   mode = c(\"simple\", \"medium\", \"extensive\"),   gene_set,   nonsignif_color = \"grey\",   signif_color = \"red\",   saturation_value = NULL,   sig_threshold = 0.05,   widthlabels = 18,   labsize = 10,   titlesize = 14,   pointSize = 5 )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/GSEA_VariableAssociation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GSEA Variable Association — GSEA_VariableAssociation","text":"data matrix data frame containing gene expression data, rows represent genes columns represent samples. metadata data frame containing sample metadata least one column corresponding variables interest. cols character vector specifying metadata columns (variables) analyze. stat Optional. statistic use ranking genes GSEA. NULL, automatically determined based gene set: \"B\" gene sets known direction (vectors). \"t\" unidirectional bidirectional gene sets (data frames). provided, argument overrides automatic selection. mode character string specifying contrast generation method categorical variables. Options: \"simple\", \"medium\", \"extensive\". Default \"simple\". gene_set named list defining gene sets GSEA. (Required) using unidirectional gene sets, provide list element vector gene names representing signature. using bidirectional gene sets, provide list element data frame: first column contain gene names. second column indicate expected direction enrichment (1 upregulated, -1 downregulated). nonsignif_color string specifying color middle adjusted p-value gradient. Default \"white\". Lower limit correspond value sig_threshold. signif_color string specifying color low end adjusted p-value gradient value chosen significance (sig_threshold). Default \"red\". saturation_value numeric value specifying lower limit adjusted p-value gradient, color correspond signif_color. Default results' minimum, unless value sig_threshold; case, 0.001. sig_threshold numeric value specifying threshold significance visualization plot. Default: 0.05. widthlabels integer controlling maximum width contrast labels text wrapping. Default: 18. labsize integer controlling axis text size plot. Default: 10. titlesize integer specifying plot title size. Default: 14. pointSize Numeric. size points lollipop plot (default 5).","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/GSEA_VariableAssociation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GSEA Variable Association — GSEA_VariableAssociation","text":"list two elements: data: data frame containing GSEA results, including normalized enrichment scores (NES), adjusted p-values, contrasts. plot: ggplot2 object visualizing GSEA results lollipop plot.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/GSEA_VariableAssociation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GSEA Variable Association — GSEA_VariableAssociation","text":"","code":"# Example usage with random data set.seed(42)  # For reproducibility  # Create random gene expression data data <- matrix(rnorm(1000), ncol = 10)  # Assign gene identifiers as row names (e.g., Gene1, Gene2, ...) rownames(data) <- paste0(\"Gene\", 1:nrow(data))  # Create metadata (e.g., group variable) metadata <- data.frame(group = rep(c(\"A\", \"B\"), each = 5))  # Define a gene set gene_set <- list(SampleSet = c(\"Gene1\", \"Gene2\", \"Gene3\"))  # Call the GSEA_VariableAssociation function results <- GSEA_VariableAssociation(data, metadata, cols = \"group\", gene_set = gene_set) #> Warning: NaNs produced #> Warning: Partial NA coefficients for 7 probe(s)  # View results print(results$data) #>      pathway      pval      padj    log2err         ES       NES  size #>       <char>     <num>     <num>      <num>      <num>     <num> <int> #> 1: SampleSet 0.2362447 0.2362447 0.03856799 -0.5510356 -1.211158     3 #>     leadingEdge stat_used Contrast #>          <list>    <char>   <char> #> 1: Gene2, Gene3         B    A - B print(results$plot)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/Heatmap_Cohen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Heatmaps for Cohen\\'s d Effect Sizes using ggplot2 — Heatmap_Cohen","title":"Generate Heatmaps for Cohen\\'s d Effect Sizes using ggplot2 — Heatmap_Cohen","text":"function computes Cohen\\'s d effect sizes corresponding p-values multiple gene signatures produces individual heatmaps. heatmap displays cell text showing Cohen\\'s d value along p-value. heatmaps arranged grid layout.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/Heatmap_Cohen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Heatmaps for Cohen\\'s d Effect Sizes using ggplot2 — Heatmap_Cohen","text":"","code":"Heatmap_Cohen(   cohenlist,   nrow = NULL,   ncol = NULL,   limits = NULL,   widthTitle = 22,   titlesize = 12,   ColorValues = NULL,   title = NULL )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/Heatmap_Cohen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Heatmaps for Cohen\\'s d Effect Sizes using ggplot2 — Heatmap_Cohen","text":"cohenlist named list element corresponds gene signature. Output CohenD_allConditions. signature element list three components: CohenD data frame rows methods columns group contrasts (formatted \\\"Group1:Group2\\\"), containing computed Cohen\\'s d effect sizes. PValue data frame structure CohenD containing corresponding p-values. padj data frame structure PValue containing corresponding p-values corrected using BH method, signatures contrasts, method. nrow Optional. integer specifying number rows heatmap grid. NULL, number rows computed automatically. ncol Optional. integer specifying number columns heatmap grid. NULL, number columns computed automatically. limits Optional. numeric vector length 2 specifying color scale limits (e.g., c(min, max)). NULL, limits determined data. widthTitle integer specifying width used wrapping gene set signature names heatmap titles. Default 22. titlesize integer specifying text size heatmap titles. Default 12. ColorValues character vector specifying colors gradient fill heatmaps. Default c(\"#F9F4AE\", \"#B44141\"). title Title grid plots.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/Heatmap_Cohen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Heatmaps for Cohen\\'s d Effect Sizes using ggplot2 — Heatmap_Cohen","text":"list two elements: plt combined heatmap arranged grid using ggpubr::ggarrange. data list containing Cohen\\'s d effect sizes p-values gene signature, computed CohenD_allConditions.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/Heatmap_Cohen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Heatmaps for Cohen\\'s d Effect Sizes using ggplot2 — Heatmap_Cohen","text":"function first calculates Cohen\\'s d effect sizes corresponding p-values gene signature using CohenD_allConditions (assumed defined elsewhere package). resulting matrices converted long format cell heatmap can display Cohen\\'s d value associated p-value (formatted Cohen\\'s d (p-value)). heatmaps adjusted display axis text ticks left-column bottom row, combined grid layout. neither nrow ncol specified, layout automatically determined best approximate square grid.","code":""},{"path":[]},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/IndividualGenes_Violins.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Violin Plots for Individual Genes — IndividualGenes_Violins","title":"Generate Violin Plots for Individual Genes — IndividualGenes_Violins","text":"function creates violin plots gene expression data jittered points optional faceting. allows visualization individual gene expression distributions across sample groups.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/IndividualGenes_Violins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Violin Plots for Individual Genes — IndividualGenes_Violins","text":"","code":"IndividualGenes_Violins(   data,   metadata = NULL,   genes,   GroupingVariable,   plot = TRUE,   ncol = NULL,   nrow = NULL,   divide = NULL,   invert_divide = FALSE,   ColorValues = NULL,   pointSize = 2,   ColorVariable = NULL,   title = NULL,   widthTitle = 16,   y_limits = NULL,   legend_nrow = NULL,   xlab = NULL,   colorlab = NULL )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/IndividualGenes_Violins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Violin Plots for Individual Genes — IndividualGenes_Violins","text":"data data frame containing gene expression values row names gene names column names sample IDs. (Required) metadata optional data frame containing sample metadata. first column must match sample IDs data. (Optional) genes character vector gene names plotted.  (Required) GroupingVariable character string specifying column metadata used grouping samples x-axis. (Required) plot logical value indicating whether print plot. FALSE, output list returned. Default TRUE. (Optional) ncol optional numeric value specifying number columns facet grid. provided, computed automatically. applicable divide NULL. (Optional) nrow optional numeric value specifying number rows facet grid. provided, computed automatically. applicable divide NULL. (Optional) divide optional character string specifying column metadata used facetting, besides faceting genes. (Optional) invert_divide logical value indicating whether invert facet layout, divide used. Default FALSE, corresponding genes rows. (Optional) ColorValues optional named vector mapping unique values ColorVariable specific colors. NULL, default Brewer palette (\"Paired\") used. (Optional) pointSize numeric value specifying size points plot. Default 2. (Optional) ColorVariable character string specifying metadata column used coloring points. Default NULL. (Optional) title character string specifying title plot. Default NULL. (Optional) widthTitle numeric value specifying maximum width title inserting line breaks. (Optional) y_limits numeric vector length 2 specifying limits y-axis. NULL (default), y-axis adjusted automatically. (Optional) legend_nrow numeric value specifying number rows legend. Default NULL. (Optional) xlab character string specifying x-axis label. NULL, defaults GroupingVariable. (Optional) colorlab character string specifying legend title colors. Default empty string. (Optional)","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/IndividualGenes_Violins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Violin Plots for Individual Genes — IndividualGenes_Violins","text":"list containing: plot ggplot2 object representing facetted violin plots. data data frame used plotting, including transformed expression values (log2) metadata.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/IndividualGenes_Violins.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Violin Plots for Individual Genes — IndividualGenes_Violins","text":"function processes gene expression data, filters specified genes, transforms expression values using log2(). violin plot jittered points generated using ggplot2. median summary added crossbar. divide provided, facets created using ggh4x::facet_grid2(). Color customization available via ColorVariable ColorValues.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/IndividualGenes_Violins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Violin Plots for Individual Genes — IndividualGenes_Violins","text":"","code":"# Example dataset data <- data.frame(   A = c(10, 20, 30),   B = c(5, 15, 25),   C = c(2, 12, 22) ) rownames(data) <- c(\"Gene1\", \"Gene2\", \"Gene3\")  metadata <- data.frame(   sample = c(\"A\", \"B\", \"C\"),   Group = c(\"Control\", \"Treatment\", \"Control\") )  genes <- c(\"Gene1\", \"Gene2\")  IndividualGenes_Violins(data, metadata, genes, \"Group\") #> Using gene as id variables #> Warning: Groups with fewer than two datapoints have been dropped. #> ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes. #> Warning: Groups with fewer than two datapoints have been dropped. #> ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes."},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/PlotScores.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot gene signature scores using various methods. — PlotScores","title":"Plot gene signature scores using various methods. — PlotScores","text":"Computes visualizes gene signature scores using one methods, returning plots scatter plots, violin plots, heatmaps, volcano plots depending inputs.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/PlotScores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot gene signature scores using various methods. — PlotScores","text":"","code":"PlotScores(   data,   metadata,   gene_sets,   method = c(\"ssGSEA\", \"logmedian\", \"ranking\", \"all\"),   ColorVariable = NULL,   Variable = NULL,   ColorValues = NULL,   ConnectGroups = FALSE,   ncol = NULL,   nrow = NULL,   title = NULL,   widthTitle = 20,   titlesize = 12,   limits = NULL,   legend_nrow = NULL,   pointSize = 4,   xlab = NULL,   labsize = 10,   compute_cohen = TRUE,   cond_cohend = NULL,   pvalcalc = FALSE,   mode = c(\"simple\", \"medium\", \"extensive\"),   widthlegend = 22,   sig_threshold = 0.05,   cohen_threshold = 0.5,   colorPalette = \"Set3\",   cor = c(\"pearson\", \"spearman\", \"kendall\") )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/PlotScores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot gene signature scores using various methods. — PlotScores","text":"data data frame normalized (non-transformed) counts row gene column sample. Row names contain gene names, column names contain sample identifiers. (Required) metadata data frame sample-level attributes. row corresponds sample, first column containing sample IDs match colnames(data). Required method = \"\" metadata-derived groupings colors used. gene_sets named list gene sets score. unidirectional gene sets: list character vectors. bidirectional gene sets: list data frames two columns: gene names direction (1 = , -1 = ). (Required) method Scoring method use. One \"ssGSEA\", \"logmedian\", \"ranking\", \"\" (default = \"logmedian\"). \"\" triggers full analysis returning heatmap volcano plots. values return single-score plots depending Variable type. ColorVariable Name metadata column color points . Used single-method mode (\"ssGSEA\", etc.). Ignored \"\" mode. Variable Metadata column define groups numeric comparisons. Required method = \"\" (used compute compare effect sizes). NULL method != \"\", density plots signature scores across samples shown (grouping comparison). ColorValues Optional. named vector list colors used control coloring plot elements across different methods variable types. Behavior depends combination method Variable: method != \"\": Variable NULL: Used density plots; single color applied (default: \"#ECBD78\" ColorValues specified). Variable categorical: named vector map level Variable (ColorVariable) specific color. Overrides palette specified colorPalette. Variable numeric: single color applied points scatter plot (default: \"#5264B6\"). method == \"\": ColorValues can named list two elements: heatmap: vector two colors used diverging scale heatmap effect sizes (default: c(\"#F9F4AE\", \"#B44141\")). volcano: named vector colors used labeling grouping gene signatures (e.g., volcano plot). provided, defaults used components. cases, ColorValues takes precedence default colorPalette setting specified. ConnectGroups Logical. TRUE, connects points sample ID across conditions (used categorical variables method != \"\"). ncol Number columns facet layout (used heatmaps score plots). nrow Number rows facet layout (used heatmaps score plots). title Plot title (optional). widthTitle Width allocated title (affects alignment). titlesize Font size plot title. limits Y-axis limits (numeric vector length 2). legend_nrow Number rows plot legend (used single-method plots). pointSize Numeric. Size points score plots (violin scatter), used plotting individual sample scores categorical numeric variables, including method = \"\". xlab Label x-axis (optional; defaults Variable). labsize Font size axis facet labels. compute_cohen Logical. Whether compute Cohen's effect sizes score plots (method != \"\"). applies method != \"\"; ignored otherwise. variable categorical cond_cohend specified, computes Cohen's d specified comparison. variable categorical cond_cohend specified, computes: Cohen's d exactly two groups. Cohen's f two groups. variable numeric, computes Cohen's f regardless cond_cohend. cond_cohend Optional. List length 2 two groups used compute effect size. values entry levels Variable (used compute_cohen = TRUE`). pvalcalc Logical. TRUE, computes p-values groups. mode string specifying level detail contrasts, method = \"\". Options : \"simple\": Pairwise comparisons (e.g., - B). \"medium\": Pairwise comparisons plus comparisons mean groups. \"extensive\": possible groupwise contrasts, ensuring balance number terms side. widthlegend Width legend volcano plots (used method = \"\") violin score plots. sig_threshold P-value cutoff shown guide line volcano plots. applies method = \"\". cohen_threshold Effect size threshold shown guide line volcano plots. Used method = \"\". colorPalette Name RColorBrewer palette used assign colors plots. Applies methods. Default \"Set3\". ColorValues provided, overrides palette. Variable NULL method != \"\" (.e., density plots), default color \"#ECBD78\" used. method = \"\" (.e., heatmaps volcano plots), default diverging color scale used: c(\"#F9F4AE\", \"#B44141\"), unless ColorValues manually specified. cor Correlation method numeric variables. One \"pearson\" (default), \"spearman\", \"kendall\". applies variable numeric method != \"\".","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/PlotScores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot gene signature scores using various methods. — PlotScores","text":"Depending method: method = \"\": returns list heatmap volcano ggplot objects. method single method: returns single ggplot object (scatter violin plot depending variable type).","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/PlotScores.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot gene signature scores using various methods. — PlotScores","text":"Behavior Based method: \"\": Requires metadata Variable. Computes scores using available methods returns: heatmap Cohen’s effect sizes. volcano plot showing effect size vs p-value across gene signatures. Uses additional parameters: mode: defines contrasts groups constructed. sig_threshold cohend_threshold: add guide dashed lines volcano plot (affect point coloring). widthlegend: controls width volcano plot legend. pointSize: controls dot size signature points volcano plot. ColorValues can named list: heatmap: two-color gradient effect sizes (default: c(\"#F9F4AE\", \"#B44141\")). signatures: named vector colors gene signatures volcano plot (default color palette \"Set3\"). \"ssGSEA\", \"logmedian\", \"ranking\": type Variable determines plot: categorical: produces violin plots optional group comparisons. numeric: produces scatter plots correlation. Variable NULL: produces density plots signature across samples. Additional arguments: ColorVariable ColorValues: control coloring points violins. colorPalette: default palette (overridden ColorValues present). ConnectGroups: links samples ID (categorical Variable ). cor: specifies correlation method numeric Variable. pvalcalc: enables group-wise p-value calculations (categorical ). compute_cohen: calculates effect sizes applicable. cond_cohend: focuses Cohen’s d calculation specific comparison. Behavior Based Variable Type: Variable numeric: Outputs scatter plots (single-method mode). Computes correlation (cor). Ignores compute_cohen, cond_cohend, pvalcalc. Color uniform (default: \"#5264B6\") unless overridden via ColorValues. Cohen’s f effect size estimation (compute_cohen = TRUE) significance pvalcalc TRUE. Variable categorical: Outputs violin plots (single-method mode). Supports: p-value comparisons (pvalcalc = TRUE), optional connection lines (ConnectGroups = TRUE), Cohen’s effect size estimation (compute_cohen = TRUE) significance (pvalcalc TRUE): cond_cohend specified, computes Cohen's d comparison. specified: Computes Cohen’s d 2 groups. Computes Cohen’s f >2 groups. Colors matched factor levels using ColorValues colorPalette. Variable NULL method != \"\": Produces density plots signature scores. Uses single fill color (\"#ECBD78\" default ColorValues).","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/PlotScores_Categorical.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Gene Set Scores by Group or Continuous Variable — PlotScores_Categorical","title":"Plot Gene Set Scores by Group or Continuous Variable — PlotScores_Categorical","text":"function computes visualizes gene set enrichment scores using various methods, optionally comparing across groups numeric variables. supports categorical numeric comparisons, statistical testing, Cohen's d effect sizes, visualizations heatmaps volcano plots.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/PlotScores_Categorical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Gene Set Scores by Group or Continuous Variable — PlotScores_Categorical","text":"","code":"PlotScores_Categorical(   data,   metadata,   gene_sets,   method = c(\"ssGSEA\", \"logmedian\", \"ranking\"),   ColorVariable = NULL,   GroupingVariable = NULL,   ColorValues = NULL,   ConnectGroups = FALSE,   ncol = NULL,   nrow = NULL,   title = NULL,   widthTitle = 10,   titlesize = 12,   limits = NULL,   legend_nrow = NULL,   pointSize = 2,   xlab = NULL,   labsize = 10,   compute_cohen = TRUE,   cond_cohend = NULL,   pvalcalc = FALSE,   mode = c(\"simple\", \"medium\", \"extensive\"),   widthlegend = 22,   cohen_threshold = 0.6,   colorPalette = \"Set3\" )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/PlotScores_Categorical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Gene Set Scores by Group or Continuous Variable — PlotScores_Categorical","text":"data data frame normalized (non-transformed) counts row gene column sample. Row names contain gene names, column names contain sample identifiers. (Required) metadata data frame describing attributes sample, row corresponds sample column attribute. first column contain sample identifiers (.e., column names data). (Required method = \"\") gene_sets Gene set input. (Required) Unidirectional gene sets: Provide named list element vector gene names representing gene signature. Bidirectional gene sets: Provide named list element data frame two columns: first column contains gene names. second column indicates expected direction enrichment (1 upregulated genes, -1 downregulated genes). method character string indicating scoring method use. Options \"ssGSEA\", \"logmedian\" \"ranking\". Defaults \"logmedian\". ColorVariable Optional. Name metadata column use point color plots. GroupingVariable Optional. Name metadata column use group comparison. ColorValues Optional. Named vector colors use group ColorVariable GroupingVariable. ConnectGroups Logical. TRUE, connects points sample across conditions. ncol Number columns facet layout plot. nrow Number rows facet layout plot. title Optional. Main title plot. widthTitle Numeric. Width title area (alignment purposes). titlesize Numeric. Font size title text. limits Optional numeric vector length 2 specifying y-axis limits. legend_nrow Optional. Number rows plot legend. pointSize Numeric. Size points plots. xlab Optional. Label x-axis. labsize Numeric. Font size axis facet labels. compute_cohen Logical. TRUE, computes Cohen's d effect sizes groups. cond_cohend Optional. Specify condition comparison subset calculating Cohen’s d. pvalcalc Logical. TRUE, computes p-values group comparisons. mode Character string indicating comparison complexity. Options: \"simple\", \"medium\", \"extensive\". widthlegend Numeric. Width legend area volcano plots. cohen_threshold Numeric. Cohen's d threshold highlight effect size volcano plots (default = 0.6). colorPalette Character. Name RColorBrewer palette coloring (default = \"Set3\").","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/PlotScores_Categorical.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Gene Set Scores by Group or Continuous Variable — PlotScores_Categorical","text":"Four methods available: ssGSEA: Uses single-sample Gene Set Enrichment Analysis (ssGSEA) method compute enrichment score signature sample using adaptation gsva() function GSVA package. logmedian: Computes score sum normalized (log2-median-centered) expression values signature genes divided number genes signature. ranking: Computes gene signature scores sample ranking expression signature genes dataset normalizing score based total number genes. : Computes gene signature scores using three methods (ssGSEA, logmedian, ranking). Returns heatmap summarizing Cohen's D metric combinations variables interest. Depending method type variable (categorical, numeric, NULL), function produces different plots: method = \"\" variable categorical, heatmap Cohen's d F statistics volcano plot showing contrasts groups variable produced. method = \"\" variable numeric, heatmap Cohen's F volcano plot produced. method != \"\" variable categorical, violin plot signature generated. method != \"\" variable NULL, density plot score distribution displayed. method != \"\" variable numeric, scatter plot created show relationship scores numeric variable. method = \"\" variable categorical, function returns heatmap Cohen's d F statistics volcano plot showing contrasts groups variable. method = \"\" variable numeric, heatmap Cohen's F volcano plot produced. method != \"\" variable categorical, violin plot signature displayed. method != \"\" variable NULL, density plot score distribution displayed. method != \"\" variable numeric, scatter plot generated show relationship scores numeric variable.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/PlotScores_Numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Gene Signature Scores with Continuous Variables — PlotScores_Numeric","title":"Plot Gene Signature Scores with Continuous Variables — PlotScores_Numeric","text":"function visualizes gene signature scores using scatter plots regression lines across continuous metadata variable. Signature scores computed per sample using one three methods: \"ssGSEA\", \"logmedian\", \"ranking\". Optionally, effect size (Cohen's f) p-value association signature score continuous variable can computed displayed.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/PlotScores_Numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Gene Signature Scores with Continuous Variables — PlotScores_Numeric","text":"","code":"PlotScores_Numeric(   data,   metadata,   gene_sets,   method = c(\"ssGSEA\", \"logmedian\", \"ranking\"),   Variable = NULL,   ColorValues = NULL,   ncol = NULL,   nrow = NULL,   title = NULL,   widthTitle = 10,   titlesize = 12,   limits = NULL,   pointSize = 2,   xlab = NULL,   labsize = 10,   compute_cohen = TRUE,   pvalcalc = FALSE,   colorPalette = \"Set3\",   cor = c(\"pearson\", \"spearman\", \"kendall\") )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/PlotScores_Numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Gene Signature Scores with Continuous Variables — PlotScores_Numeric","text":"data data frame normalized (non-transformed) gene expression counts. Rows genes, columns samples. Row names gene names, column names match sample identifiers metadata. metadata data frame row corresponds sample contains sample-level attributes (e.g., clinical experimental metadata). Must include column matching sample IDs data. gene_sets list gene sets (signatures). element either character vector gene names data frame gene names enrichment direction (1 upregulated, -1 downregulated). method Scoring method use. One \"ssGSEA\", \"logmedian\", \"ranking\". Default \"logmedian\". Variable Name continuous variable metadata use x-axis scoring association. ColorValues (Optional) named vector defining color plotted points. NULL, defaults preset color. ncol, nrow Number columns rows facet grid layout. NULL, computed automatically. title Optional string overall title plot grid. widthTitle Maximum character width titles inserting line breaks. Default 10. titlesize Numeric value font size plot titles. Default 12. limits Optional numeric vector length 2 define y-axis limits. pointSize Size plotted points. Default 2. xlab Optional label x-axis. NULL, defaults name Variable. labsize Font size axis labels. Default 10. compute_cohen Logical. TRUE (default), computes Cohen's f effect size association signature score continuous variable. pvalcalc Logical. TRUE, includes p-value plot subtitle. Default FALSE. colorPalette Name RColorBrewer palette coloring. Default \"Set3\". Currently unused kept consistency. cor Character string indicating correlation method used ggpubr::stat_cor(). Options \"pearson\" (default), \"kendall\", \"spearman\".","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/PlotScores_Numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Gene Signature Scores with Continuous Variables — PlotScores_Numeric","text":"ggplot2 object multi-plot figure showing scatter plots gene signature, linear regression lines optional statistical annotations.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/PlotScores_Numeric.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Gene Signature Scores with Continuous Variables — PlotScores_Numeric","text":"gene signature, function: Computes signature score per sample using selected method. Plots score continuous metadata variable (Variable). Adds regression line optionally computes displays Cohen’s f effect size p-value. Returns faceted grid ggplots, arranged ncol nrow. version function specifically tailored use continuous variables.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ROCAUC_Scores_Calculate.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute ROC Curves and AUC Values for Gene Signature Scores — ROCAUC_Scores_Calculate","title":"Compute ROC Curves and AUC Values for Gene Signature Scores — ROCAUC_Scores_Calculate","text":"function calculates Receiver Operating Characteristic (ROC) curves Area Curve (AUC) values gene signature scores across different contrasts given categorical variable.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ROCAUC_Scores_Calculate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute ROC Curves and AUC Values for Gene Signature Scores — ROCAUC_Scores_Calculate","text":"","code":"ROCAUC_Scores_Calculate(   data,   metadata,   gene_sets,   method = c(\"logmedian\", \"ssGSEA\", \"ranking\", \"all\"),   variable,   mode = c(\"simple\", \"medium\", \"extensive\") )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ROCAUC_Scores_Calculate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute ROC Curves and AUC Values for Gene Signature Scores — ROCAUC_Scores_Calculate","text":"data matrix data frame gene expression data (genes rows, samples columns). metadata data frame containing sample metadata, including grouping variable. gene_sets named list gene sets, entry character vector gene names. method character string specifying score calculation method. Options: \"logmedian\", \"ssGSEA\", \"ranking\", \"\". variable character string specifying categorical variable group comparisons.#' mode string specifying level detail contrasts. Options : \"simple\": Pairwise comparisons (e.g., - B). \"medium\": Pairwise comparisons plus comparisons mean groups. \"extensive\": possible groupwise contrasts, ensuring balance number terms side.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ROCAUC_Scores_Calculate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute ROC Curves and AUC Values for Gene Signature Scores — ROCAUC_Scores_Calculate","text":"named list containing ROC curve data AUC values method, signature, contrast.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ROC_Scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ROC Curves for Gene Signature Scores — ROC_Scores","title":"Plot ROC Curves for Gene Signature Scores — ROC_Scores","text":"function generates ROC curve plots different gene signatures across multiple scoring methods.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ROC_Scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ROC Curves for Gene Signature Scores — ROC_Scores","text":"","code":"ROC_Scores(   data,   metadata,   gene_sets,   method = c(\"logmedian\", \"ssGSEA\", \"ranking\", \"all\"),   variable,   colors = c(logmedian = \"#3E5587\", ssGSEA = \"#B65285\", ranking = \"#B68C52\"),   grid = TRUE,   spacing_annotation = 0.3,   ncol = NULL,   nrow = NULL,   mode = c(\"simple\", \"medium\", \"extensive\"),   widthTitle = 18,   title = NULL,   titlesize = 12 )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ROC_Scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ROC Curves for Gene Signature Scores — ROC_Scores","text":"data matrix data frame gene expression data. metadata data frame containing sample metadata. gene_sets named list gene sets. method character string specifying scoring method(s) (\"logmedian\", \"ssGSEA\", \"ranking\", \"\"). variable character string specifying categorical variable group comparisons. colors named vector specifying colors method. one color allowed, method != \"\". Default colors c(logmedian = \"#3E5587\", ssGSEA = \"#B65285\", ranking = \"#B68C52\"). grid Logical; TRUE, arranges plots grid. spacing_annotation numeric value specifying spacing labels AUC values. Default 0.3. ncol Optional numeric value specifying number columns grid layout combined plots. NULL, many columns contrasts. number 1, near-square grid computed. nrow Optional numeric value specifying number rows grid layout. NULL, many columns gene sets. number 1, near-square grid computed. mode string specifying level detail contrasts. Options : \"simple\": Pairwise comparisons (e.g., - B). \"medium\": Pairwise comparisons plus comparisons mean groups. \"extensive\": possible groupwise contrasts, ensuring balance number terms side. widthTitle Optional integer specifying maximum width title inserting line breaks. Titles break _, -, : possible, exact width character found. Default 18. title Title grid plots. titlesize integer specifying text size heatmap titles. Default 12.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ROC_Scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ROC Curves for Gene Signature Scores — ROC_Scores","text":"ggplot2 ggarrange object containing ROC curve plots.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ROC_Scores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ROC Curves for Gene Signature Scores — ROC_Scores","text":"","code":"# Example data data <- as.data.frame(abs(matrix(rnorm(1000), ncol = 10))) rownames(data) <- paste0(\"Gene\", 1:100)  # Name columns as Gene1, Gene2, ..., Gene10 colnames(data) <- paste0(\"Sample\", 1:10)  # Name rows as Sample1, Sample2, ..., Sample100  # Metadata with sample ID and condition metadata <- data.frame(   SampleID = rownames(data),  # Sample ID matches the rownames of the data   Condition = rep(c(\"A\", \"B\"), each = 50)  # Two conditions (A and B) )  # Example gene set gene_sets <- list(Signature1 = c(\"Gene1\", \"Gene2\", \"Gene3\"))  # Example gene set  # Call ROC_Scores function ROC_Scores(data, metadata, gene_sets, method = \"ssGSEA\", variable = \"Condition\") #> Considering unidirectional gene signature mode for signature Signature1 #> No id variables; using all as measure variables #> Error in combn(levels, 2, function(x) normalize_contrast(x[1], x[2]),     simplify = TRUE): n < m # View results print(results) #> Error: object 'results' not found"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ROCandAUCplot.html","id":null,"dir":"Reference","previous_headings":"","what":"ROC and AUC Plot Function — ROCandAUCplot","title":"ROC and AUC Plot Function — ROCandAUCplot","text":"function computes ROC curves AUC values gene based gene expression data sample metadata. can generate ROC plots, AUC heatmap, arranged side‐‐side.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ROCandAUCplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ROC and AUC Plot Function — ROCandAUCplot","text":"","code":"ROCandAUCplot(   data,   metadata,   genes = NULL,   condition_var,   class,   group_var = NULL,   plot_type = \"roc\",   title = NULL,   widthTitle = 16,   roc_params = list(),   heatmap_params = list(),   commomplot_params = list() )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ROCandAUCplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ROC and AUC Plot Function — ROCandAUCplot","text":"data data frame matrix containing gene expression data, genes rows samples columns. metadata data frame containing sample metadata. first column contain sample identifiers match column names data. genes character vector specifying genes plot. NULL (default), genes data used. warning issued 30 genes selected. condition_var character string specifying column name metadata representing condition interest. (Mandatory; default.) class character string vector specifying positive class label condition. (Mandatory; default.) group_var optional character string specifying column name metadata used grouping samples (e.g., cell types). provided (NULL), samples treated single group. plot_type character string indicating plot(s) generate. Accepted values \"roc\" (ROC curves), \"heatmap\" (AUC heatmap), \"\" (arranged side--side). Default \"roc\". title optional character string specifying custom title plot(s). provided, default titles generated. widthTitle numeric value used wrapping title. Default 16. roc_params list additional parameters customizing ROC plot. Possible elements include: nrow integer specifying number rows ROC plot grid. NULL (default), calculated automatically. ncol integer specifying number columns ROC plot grid. NULL (default), calculated automatically. colors named vector colors different groups. NULL (default), default color palette generated. heatmap_params list additional parameters customizing AUC heatmap. Possible elements include: cluster_rows Logical; TRUE (default), rows clustered. cluster_columns Logical; TRUE (default), columns clustered. col vector length 2 colors used minimum maximum values color scale. Defaults c(\"#FFFFFF\", \"#21975C\"). limits numeric vector length 2 specifying minimum maximum values color scale. provided, defaults c(0.5, 1). name character string legend title color scale. Default \"AUC\". row_names_gp Optional graphical parameters row names (passed ComplexHeatmap). column_names_gp Optional graphical parameters column names (passed ComplexHeatmap). commomplot_params list parameters customizing layout combined plot plot_type = \"\". Possible elements include: widths numeric vector specifying relative widths ROC heatmap panels. heights numeric vector specifying relative heights panels.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ROCandAUCplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ROC and AUC Plot Function — ROCandAUCplot","text":"Invisibly returns list containing: roc_plot ggplot2 object ROC curves (generated). heatmap ComplexHeatmap object (generated). combined combined grid arrangement (plot_type = \"\"). auc_values data frame calculated AUC values.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ROCandAUCplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ROC and AUC Plot Function — ROCandAUCplot","text":"function processes gene expression data metadata compute ROC curves AUC values gene. Depending value plot_type, produces ROC plots (using ggplot2), AUC heatmap (using ComplexHeatmap), arranged side--side (using gridExtra). group_var provided, samples treated single group.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ROCandAUCplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ROC and AUC Plot Function — ROCandAUCplot","text":"","code":"if (FALSE) { # \\dontrun{   # Example: Generate both ROC plots and heatmap with custom parameters   result <- ROCandAUCplot(data = myData,                           metadata = myMetadata,                           genes = c(\"Gene1\", \"Gene2\", \"Gene3\"),                           condition_var = \"Genotype\",                           class = \"Mutant\",                           group_var = \"CellType\",                           plot_type = \"all\",                           title = \"My Custom Title\",                           roc_params = list(ncol = 3),                           heatmap_params = list(limits = c(0.4, 1)),                           commomplot_params = list(widths = c(1, 1))) } # }"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/Score_VariableAssociation.html","id":null,"dir":"Reference","previous_headings":"","what":"Score Variable Association — Score_VariableAssociation","title":"Score Variable Association — Score_VariableAssociation","text":"function evaluates association gene expression scores metadata variables. uses linear modeling get Cohen's F, contrast-based comparisons categorical variables compute Cohen's D. function generates plots summarizing results.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/Score_VariableAssociation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score Variable Association — Score_VariableAssociation","text":"","code":"Score_VariableAssociation(   data,   metadata,   cols,   method = c(\"logmedian\", \"ssGSEA\", \"ranking\"),   gene_set,   mode = c(\"simple\", \"medium\", \"extensive\"),   nonsignif_color = \"grey\",   signif_color = \"red\",   saturation_value = NULL,   sig_threshold = 0.05,   widthlabels = 18,   labsize = 10,   title = NULL,   titlesize = 14,   pointSize = 5,   discrete_colors = NULL,   continuous_color = \"#8C6D03\",   color_palette = \"Set2\" )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/Score_VariableAssociation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score Variable Association — Score_VariableAssociation","text":"data data frame matrix containing gene expression data. metadata data frame containing sample metadata least one column corresponding variables interest. cols character vector specifying metadata columns analyze. method character string specifying scoring method (\"logmedian\", \"ssGSEA\", \"ranking\"). gene_set named list containing one gene set scoring. mode character string specifying contrast generation method (\"simple\", \"medium\", \"extensive\"). Four methods available: ssGSEA: Uses single-sample Gene Set Enrichment Analysis (ssGSEA) method compute enrichment score signature sample using adaptation gsva() function GSVA package. logmedian: Computes score sum normalized (log2-median-centered) expression values signature genes divided number genes signature. ranking: Computes gene signature scores sample ranking expression signature genes dataset normalizing score based total number genes. nonsignif_color string specifying color non-significant results. Default: \"grey\". signif_color string specifying color significant results. Default: \"red\". saturation_value numeric value color saturation threshold. Default: NULL (auto-determined). sig_threshold numeric value specifying significance threshold. Default: 0.05. widthlabels integer controlling contrast label wrapping. Default: 18. labsize integer controlling axis text size. Default: 10. title string specifying plot title. Default: NULL. titlesize integer specifying title size. Default: 14. pointSize numeric value point size plots. Default: 5. discrete_colors named list mapping categorical variable levels colors. element named vector names correspond factor levels. Default: NULL. continuous_color string specifying color continuous variables. Default: \"#8C6D03\". color_palette string specifying color palette discrete variables. Default: \"Set2\".","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/Score_VariableAssociation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score Variable Association — Score_VariableAssociation","text":"list : Overall: Data frame Cohen's F p-values overall associations. Contrasts: Data frame Cohen's D p-values contrasts (non numerical variables). plot: Combined visualization results. plot_contrasts: Plot contrast results (non numerical variables). plot_overall: Plot overall associations. plot_distributions: List variable distribution plots.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/Score_VariableAssociation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Score Variable Association — Score_VariableAssociation","text":"","code":"data <- as.data.frame(abs(matrix(rnorm(1000), ncol = 10))) rownames(data) <- paste0(\"Gene\", 1:100)  # Name columns as Gene1, Gene2, ..., Gene10 colnames(data) <- paste0(\"Sample\", 1:10)  # Name rows as Sample1, Sample2, ..., Sample100  metadata <- data.frame(   sample = colnames(data),  # Sample ID matches the rownames of the data   Condition = rep(c(\"A\", \"B\"), each = 50)  # Two conditions (A and B) ) gene_set <- list(SampleSet = c(\"Gene1\", \"Gene2\", \"Gene3\")) results <- Score_VariableAssociation(data, metadata, cols = \"Condition\", gene_set = gene_set) #> Considering unidirectional gene signature mode for signature SampleSet #> Warning: no non-missing arguments to min; returning Inf  print(results$plot)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/VariableAssociation.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Statistical Associations Between Variables and a Target Score — VariableAssociation","title":"Visualize Statistical Associations Between Variables and a Target Score — VariableAssociation","text":"Creates visual representations statistical relationships predictor variables target variable (target_var). function generates scatter plots regression lines numeric variables density plots categorical variables, incorporating statistical test results compute_stat_tests().","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/VariableAssociation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Statistical Associations Between Variables and a Target Score — VariableAssociation","text":"","code":"VariableAssociation(   df,   cols,   target_var,   targetvar_lab = \"Score\",   discrete_colors = NULL,   continuous_color = \"#8C6D03\",   color_palette = \"Set2\",   sizeannot = 3,   ncol = NULL,   nrow = NULL,   numeric = \"pearson\",   categorical_bin = \"t.test\",   categorical_multi = \"anova\",   title = NULL,   titlesize = 14,   nonsignif_color = \"grey\",   signif_color = \"red\",   saturation_value = NULL,   sig_threshold = 0.05,   widthlabels = 18,   pointSize = 5,   widths = 1,   heights = 1 )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/VariableAssociation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Statistical Associations Between Variables and a Target Score — VariableAssociation","text":"df data frame containing target variable predictors. cols character vector predictor variables include plots. target_var dependent variable plotted. targetvar_lab string specifying label target variable. Default \"Score\". discrete_colors Optional. named list specifying custom colors categorical variables. element named vector names correspond factor levels. continuous_color color numeric variables scatter plots. Default \"#8C6D03\". color_palette color palette RColorBrewer categorical variables. Default \"Set2\". sizeannot font size p-value annotations plots. Default 3. ncol Number columns arranged plot grid. NULL, layout auto-determined. nrow Number rows arranged plot grid. NULL, layout auto-determined. numeric correlation method numeric predictors. Options: \"pearson\" (default), \"spearman\", \"kendall\". categorical_bin statistical test binary categorical variables. Options: \"t.test\" (default) \"wilcoxon\". categorical_multi statistical test multi-level categorical variables. Options: \"anova\" (default) \"kruskal-wallis\". title string specifying main title grid plots. titlesize Numeric; font size main title grid plots (default = 14). nonsignif_color string specifying color middle adjusted p-value gradient. Default \"white\". Lower limit correspond value sig_threshold. signif_color string specifying color low end adjusted p-value gradient value chosen significance (sig_threshold). Default \"blue\". saturation_value numeric value specifying lower limit adjusted p-value gradient, color correspond signif_color. Default results' minimum, unless value sig_threshold; case, 0.001. sig_threshold numeric value specifying threshold significance visualization plot. Default: 0.05. widthlabels integer controlling maximum width contrast labels text wrapping. Default: 18. pointSize Numeric. size points lollipop plot (default 5). widths Numerical vector relative columns widths. length number variables provided. Default plot width. heights Numerical vector relative columns heights  length number variables provided. Default plot height","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/VariableAssociation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize Statistical Associations Between Variables and a Target Score — VariableAssociation","text":"named list two elements: plot: ggarrange object displaying arranged statistical plots grid format. data: named list containing statistical test results variable, entry data frame metric values p-values.","code":""},{"path":[]},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/VariableAssociation.html","id":"plot-types","dir":"Reference","previous_headings":"","what":"Plot Types","title":"Visualize Statistical Associations Between Variables and a Target Score — VariableAssociation","text":"Numeric Predictors: Scatter plots regression lines, annotated correlation metrics. Categorical Predictors: Density plots colored factor levels, annotated test statistics.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/VariableAssociation.html","id":"variable-classification-amp-statistical-methods","dir":"Reference","previous_headings":"","what":"Variable Classification & Statistical Methods","title":"Visualize Statistical Associations Between Variables and a Target Score — VariableAssociation","text":"Numeric: Continuous numeric integer variables 10 unique values. Test: Pearson, Spearman, Kendall correlation. Categorical Bin: Binary categorical variables (factors, characters, integers exactly 2 unique values). Test: T-test Wilcoxon rank-sum test. Categorical Multi: Categorical variables 2 unique values (10 levels recommended). Test: ANOVA (default) Kruskal-Wallis. ANOVA used, Tukey’s HSD post-hoc test performed. warning issued categorical variable 10 unique values.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/VariableAssociation.html","id":"color-customization","dir":"Reference","previous_headings":"","what":"Color Customization","title":"Visualize Statistical Associations Between Variables and a Target Score — VariableAssociation","text":"Continuous Variables: continuous_color specifies color scatter plot points. Categorical Variables: User can provide named list (discrete_colors) custom colors factor levels. discrete_colors NULL, colors chosen RColorBrewer palette (color_palette). plot annotated corresponding statistical test result (e.g., correlation coefficient, ANOVA F-value, t-test statistic) p-values. categorical variable 10 unique levels, warning issued. discrete_colors provided, overrides color_palette specified variables. ncol nrow NULL, function automatically determines optimal grid layout.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/VisualiseIndividualGenes.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Individual Genes' Expression Using Various Methods — VisualiseIndividualGenes","title":"Visualize Individual Genes' Expression Using Various Methods — VisualiseIndividualGenes","text":"function provides multiple visualization methods analyzing individual genes expression dataset. Users can generate violin plots, expression heatmaps, correlation heatmaps, ROC curves, effect size plots.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/VisualiseIndividualGenes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Individual Genes' Expression Using Various Methods — VisualiseIndividualGenes","text":"","code":"VisualiseIndividualGenes(   data,   metadata,   genes,   method = c(\"violins\", \"expr_heatmap\", \"corr_heatmap\", \"roc\", \"effectsize\", \"all\"),   plot = TRUE,   GroupingVariable = NULL,   ColorVariable = NULL,   ColorValues = NULL,   pointSize = 2,   title = NULL,   widthTitle = 16,   y_limits = NULL,   legend_nrow = NULL,   ncol = NULL,   nrow = NULL,   divide = NULL,   invert_divide = FALSE,   xlab = NULL,   colorlab = NULL )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/VisualiseIndividualGenes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Individual Genes' Expression Using Various Methods — VisualiseIndividualGenes","text":"data data frame rows correspond genes columns correspond samples. row names gene identifiers. metadata data frame containing sample metadata. first column contain sample identifiers matching column names data. genes character vector gene names plotted. 20 genes provided, warning issued. method character string specifying visualization method use. Options \"violins\", \"expr_heatmap\", \"corr_heatmap\", \"roc\", \"effectsize\", \"\". Default \"violins\". \"\" selected, methods applied. plot logical value indicating whether display generated plots (TRUE) (FALSE). Default TRUE. GroupingVariable character string specifying column name metadata used grouping samples x-axis violin plots. ColorVariable character string specifying column name metadata used color points violin plots. ColorValues optional named vector mapping unique values ColorVariable specific colors. pointSize numeric value specifying size jittered points violin plots. Default 2. title optional character string specifying title plot. widthTitle optional integer specifying maximum width title inserting line breaks. Default 16. y_limits numeric vector length 2 specifying limits y-axis violin plots. NULL, y-axis adjusted automatically. Default NULL. legend_nrow numeric value specifying number rows legend violin plots. NULL, default number rows determined automatically. ncol optional numeric value specifying number columns grid layout violin plots. NULL, automatically determined. nrow optional numeric value specifying number rows grid layout violin plots. NULL, automatically determined. divide character string specifying column metadata used divide violin plots facets. Default NULL. invert_divide logical value indicating whether invert facet layout violin plots. Default FALSE. xlab optional character string specifying label x-axis violin plots. Default name GroupingVariable. colorlab optional character string specifying legend title color variable. Default NULL.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/VisualiseIndividualGenes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize Individual Genes' Expression Using Various Methods — VisualiseIndividualGenes","text":"named list selected method (e.g., \"violins\", \"expr_heatmap\", etc.) key. element list named list following structure: data data frame matrix containing transformed data used plotting, formatted according selected method. plot generated plot object (e.g., ggplot2 object) corresponding visualization. aux Additional parameters, specific method. plot = TRUE, plots also displayed output.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/VisualiseIndividualGenes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize Individual Genes' Expression Using Various Methods — VisualiseIndividualGenes","text":"function calls multiple sub-functions based selected visualization method: IndividualGenes_Violins(): Generates violin plots gene expression (log2 transformed). IndividualGenes_ExprHeatmap(): Creates heatmap expression values. IndividualGenes_CorrHeatmap(): Computes visualizes correlation heatmap. IndividualGenes_ROC(): Plots receiver operating characteristic (ROC) curves. IndividualGenes_EffectSize(): Computes visualizes effect sizes. function returns list plots. method = \"\", available visualizations included.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/Volcano_Cohen.html","id":null,"dir":"Reference","previous_headings":"","what":"Volcano Plot of Cohen's d Effect Sizes and Adjusted p-values — Volcano_Cohen","title":"Volcano Plot of Cohen's d Effect Sizes and Adjusted p-values — Volcano_Cohen","text":"function computes Cohen's d effect sizes adjusted p-values multiple gene signatures across defined contrasts, generates volcano plot (Cohen's d vs -log10(padj)) using ggplot2. point represents method-signature pair, faceted contrast.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/Volcano_Cohen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Volcano Plot of Cohen's d Effect Sizes and Adjusted p-values — Volcano_Cohen","text":"","code":"Volcano_Cohen(   cohenlist,   titlesize = 12,   ColorValues = NULL,   title = NULL,   widthlegend = 22,   pointSize = 3,   sig_threshold = 0.05,   cohen_threshold = 0.5,   colorPalette = \"Set3\",   nrow = NULL,   ncol = NULL )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/Volcano_Cohen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Volcano Plot of Cohen's d Effect Sizes and Adjusted p-values — Volcano_Cohen","text":"cohenlist named list element corresponds gene signature. Output CohenD_allConditions. signature element list three components: CohenD data frame rows methods columns group contrasts (formatted \\\"Group1:Group2\\\"), containing computed Cohen\\'s d effect sizes. PValue data frame structure CohenD containing corresponding p-values. padj data frame structure PValue containing corresponding p-values corrected using BH method, signatures contrasts, method. titlesize Integer. Size facet strip titles. Default 12. ColorValues Character vector colors used distinguish signatures. NULL, colors automatically generated. title Optional title overall plot. widthlegend Integer. Width used wrap long signature names. Default 22. pointSize Numeric. Size points plot. Default 3. sig_threshold Numeric. Adjusted p-value threshold significance. Default 0.05. cohen_threshold Numeric. Effect size threshold. Default 0.5. colorPalette Character. Name RColorBrewer palette use ColorValues provided. Default \"Set3\". nrow Optional numeric value specifying number rows grid layout. NULL, near-square grid computed. ncol Optional numeric value specifying number columns ggplot facet. NULL, near-square grid computed.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/Volcano_Cohen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Volcano Plot of Cohen's d Effect Sizes and Adjusted p-values — Volcano_Cohen","text":"ggplot object showing faceted volcano plot Cohen's d effect sizes across signatures methods contrast.","code":""},{"path":[]},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/calculateDE.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Differential Gene Expression Statistics using limma — calculateDE","title":"Calculate Differential Gene Expression Statistics using limma — calculateDE","text":"function computes differential gene expression statistics gene using linear model via limma package. Users may supply custom design matrix directly via design argument, specify model formula (lmexpression) (e.g., ~0 + X ~X) variables metadata build design matrix. contrasts supplied, applied using limma::makeContrasts limma::contrasts.fit. Alternatively, using lmexpression supplied design, specific coefficient indices may provided via coefs extract corresponding gene-level statistics.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/calculateDE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Differential Gene Expression Statistics using limma — calculateDE","text":"","code":"calculateDE(   data,   metadata = NULL,   variables = NULL,   lmexpression = NULL,   modelmat = NULL,   contrasts = NULL )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/calculateDE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Differential Gene Expression Statistics using limma — calculateDE","text":"data numeric matrix gene expression values genes rows samples columns. Row names must correspond gene identifiers. Data transformed (.e., log2 transformed). metadata data frame containing sample metadata used build design matrix (unless design provided directly). variables character vector specifying variable(s) metadata use default linear model. Ignored lmexpression design provided. lmexpression (Optional) model formula (e.g., ~0 + X ~X) provided user build design matrix. provided, formula used instead constructing one variables. modelmat (Optional) user-supplied design matrix. provided, design used directly lmexpression variables ignored. order samples design matrix match order data. contrasts character vector specifying contrasts applied (e.g., c(\"-B\")). multiple contrasts provided, function returns list DE results (one per contrast). Required lmexpression NULL, optional otherwise. provided, average expression profile condition returned instead differential gene expression.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/calculateDE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Differential Gene Expression Statistics using limma — calculateDE","text":"list data-frames differential expression statistics","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/calculateDE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Differential Gene Expression Statistics using limma — calculateDE","text":"function fits linear model limma::lmFit applies empirical Bayes moderation limma::eBayes. Depending input: design matrix provided via design, design used directly. lmexpression provided (design supplied), design matrix built using formula. Otherwise, design matrix constructed using variables argument (intercept). contrasts provided, applied using limma::makeContrasts limma::contrasts.fit. contrasts provided, function returns possible coefficients fitted linear model.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/calculateDE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Differential Gene Expression Statistics using limma — calculateDE","text":"","code":"if (FALSE) { # \\dontrun{   # Create example data:   data <- matrix(rnorm(1000), nrow = 100, ncol = 10)   rownames(data) <- paste0(\"gene\", 1:100)   colnames(data) <- paste0(\"sample\", 1:10)   metadata <- data.frame(sample = colnames(data), X = rep(c(\"A\", \"B\"), each = 5))    # Example 1: Build design matrix from variables with a contrast:   de_res <- calculateDE(data, metadata, variables = \"X\", contrasts = \"A-B\")    # Example 2: Use a custom model formula:   de_res2 <- calculateDE(data, metadata, variables = \"X\", lmexpression = \"~X\", coefs = c(2,3))    # Example 3: Supply a custom design matrix directly:   design <- model.matrix(~0 + X, data = metadata)   de_res3 <- calculateDE(data, metadata, variables = \"X\", design = design, contrasts = \"A-B\") } # }"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/calculateScore_logmedian_bidirectional.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Log-Median Scores for Bidirectional Gene Sets — calculateScore_logmedian_bidirectional","title":"Calculate Log-Median Scores for Bidirectional Gene Sets — calculateScore_logmedian_bidirectional","text":"Computes gene signature scores considering upregulated downregulated genes separately, calculates differential score subtracting downregulated upregulated scores.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/calculateScore_logmedian_bidirectional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Log-Median Scores for Bidirectional Gene Sets — calculateScore_logmedian_bidirectional","text":"","code":"calculateScore_logmedian_bidirectional(data, signature)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/calculateScore_logmedian_bidirectional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Log-Median Scores for Bidirectional Gene Sets — calculateScore_logmedian_bidirectional","text":"data data frame normalized counts (genes rows, samples columns). signature data frame : first column containing gene names. second column specifying enrichment direction (1 upregulated, -1 downregulated).","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/calculateScore_logmedian_bidirectional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Log-Median Scores for Bidirectional Gene Sets — calculateScore_logmedian_bidirectional","text":"named vector log-median-centered scores per sample.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/calculateScore_logmedian_unidirectional.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Log-Median Scores for Unidirectional Gene Sets — calculateScore_logmedian_unidirectional","title":"Calculate Log-Median Scores for Unidirectional Gene Sets — calculateScore_logmedian_unidirectional","text":"Computes log-median-centered scores gene signatures genes expected enriched direction, direction known.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/calculateScore_logmedian_unidirectional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Log-Median Scores for Unidirectional Gene Sets — calculateScore_logmedian_unidirectional","text":"","code":"calculateScore_logmedian_unidirectional(data, signature)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/calculateScore_logmedian_unidirectional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Log-Median Scores for Unidirectional Gene Sets — calculateScore_logmedian_unidirectional","text":"data data frame normalized counts (genes rows, samples columns). signature vector gene names data frame first column contains gene names.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/calculateScore_logmedian_unidirectional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Log-Median Scores for Unidirectional Gene Sets — calculateScore_logmedian_unidirectional","text":"named vector log-median-centered scores per sample.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/cohen_d.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Cohen\\'s d Effect Size — cohen_d","title":"Compute Cohen\\'s d Effect Size — cohen_d","text":"Computes absolute Cohen\\'s d effect size two numeric vectors. function returns absolute value difference means divided pooled standard deviation.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/cohen_d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Cohen\\'s d Effect Size — cohen_d","text":"","code":"cohen_d(x, y)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/cohen_d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Cohen\\'s d Effect Size — cohen_d","text":"x numeric vector representing values group 1. y numeric vector representing values group 2.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/cohen_d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Cohen\\'s d Effect Size — cohen_d","text":"numeric value representing Cohen\\'s d. Returns NA either group fewer two observations pooled standard deviation zero.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/colRanking.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Independent Column-wise Ranks of Matrix Elements — colRanking","title":"Compute Independent Column-wise Ranks of Matrix Elements — colRanking","text":"function computes rank element every column numeric matrix independently. column, smallest element receives rank 1, second smallest rank 2, .","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/colRanking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Independent Column-wise Ranks of Matrix Elements — colRanking","text":"","code":"colRanking(x, ties.method = \"average\")"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/colRanking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Independent Column-wise Ranks of Matrix Elements — colRanking","text":"x numeric matrix. ties.method character string specifying method used tie-breaking. Options include \"average\", \"first\", \"random\", \"max\", \"min\". default \"average\".","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/colRanking.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Independent Column-wise Ranks of Matrix Elements — colRanking","text":"numeric matrix dimensions x column contains ranks corresponding column's elements.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/compute_cohen_d.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Pairwise Cohen\\'s d and P-Values — compute_cohen_d","title":"Compute Pairwise Cohen\\'s d and P-Values — compute_cohen_d","text":"Computes Cohen\\'s d effect sizes corresponding p-values pairwise comparisons grouping variable data frame.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/compute_cohen_d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Pairwise Cohen\\'s d and P-Values — compute_cohen_d","text":"","code":"compute_cohen_d(   dfScore,   variable,   quantitative_var = \"score\",   mode = c(\"simple\", \"medium\", \"extensive\") )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/compute_cohen_d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Pairwise Cohen\\'s d and P-Values — compute_cohen_d","text":"dfScore data frame containing least one numeric column grouping variable. Output flatten_results. variable string specifying name categorical grouping column dfScore. quantitative_var string specifying name numeric column (default \"score\").","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/compute_cohen_d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Pairwise Cohen\\'s d and P-Values — compute_cohen_d","text":"data frame following columns: Group1 first group pair. Group2 second group pair. CohenD computed Cohen\\'s d effect size comparison. PValue p-value t-test comparing two groups.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/compute_cohens_f_pval.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Cohen's f and p-value for a given model and predictor — compute_cohens_f_pval","title":"Compute Cohen's f and p-value for a given model and predictor — compute_cohens_f_pval","text":"function calculates Cohen's f effect size corresponding p-value given linear model ANOVA model based predictor variable type (numeric categorical).","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/compute_cohens_f_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Cohen's f and p-value for a given model and predictor — compute_cohens_f_pval","text":"","code":"compute_cohens_f_pval(model, type)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/compute_cohens_f_pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Cohen's f and p-value for a given model and predictor — compute_cohens_f_pval","text":"model linear model (lm) ANOVA model (aov) fitted data. type string indicating whether predictor numeric categorical. Options \"Numeric\" \"Categorical\".","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/compute_cohens_f_pval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Cohen's f and p-value for a given model and predictor — compute_cohens_f_pval","text":"named vector two elements: Cohen_f: Cohen's f effect size value. P_Value: p-value statistical test.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/compute_cohens_f_pval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Cohen's f and p-value for a given model and predictor — compute_cohens_f_pval","text":"Cohen's f effect size computed eta-squared (\\(\\eta^2\\)) value. numeric predictors (continuous variables), p-value obtained t-test summary(lm(...)). categorical predictors (binary multi-level), p-value obtained F-test anova(lm(...)).","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/compute_stat_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Statistical Tests for Variable Associations with a Target Variable — compute_stat_tests","title":"Compute Statistical Tests for Variable Associations with a Target Variable — compute_stat_tests","text":"Performs statistical tests assess relationship predictor variables target variable, selecting appropriate methods based variable types. Returns list data frames containing metric values p-values.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/compute_stat_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Statistical Tests for Variable Associations with a Target Variable — compute_stat_tests","text":"","code":"compute_stat_tests(   df,   target_var,   cols = NULL,   numeric = \"pearson\",   categorical_bin = \"t.test\",   categorical_multi = \"anova\" )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/compute_stat_tests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Statistical Tests for Variable Associations with a Target Variable — compute_stat_tests","text":"df data frame containing target variable predictors. target_var string specifying dependent variable. cols Optional. character vector predictor variables. NULL, variables except target_var used. numeric correlation method numeric predictors. Options: \"pearson\" (default), \"spearman\", \"kendall\". categorical_bin statistical test binary categorical variables. Options: \"t.test\" (default) \"wilcoxon\". categorical_multi statistical test multi-level categorical variables. Options: \"anova\" (default) \"kruskal-wallis\".","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/compute_stat_tests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Statistical Tests for Variable Associations with a Target Variable — compute_stat_tests","text":"named list (one entry per variable analysed) element data frame : Metric: test statistic (correlation coefficient, t-statistic, ANOVA F-value, etc.). p-value: significance value test. Categorical Multi, multiple rows included pairwise comparisons (Tukey HSD results).","code":""},{"path":[]},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/compute_stat_tests.html","id":"variable-classification","dir":"Reference","previous_headings":"","what":"Variable Classification","title":"Compute Statistical Tests for Variable Associations with a Target Variable — compute_stat_tests","text":"Numeric: Continuous numeric integer variables 10 unique values. Categorical Bin: Binary categorical variables (factors, characters, integers exactly 2 unique values). Categorical Multi: Categorical variables 2 unique values (10 levels recommended). warning issued categorical variables 10 unique values.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/compute_stat_tests.html","id":"statistical-tests-applied","dir":"Reference","previous_headings":"","what":"Statistical Tests Applied","title":"Compute Statistical Tests for Variable Associations with a Target Variable — compute_stat_tests","text":"Numeric Predictors: Pearson, Spearman, Kendall correlation. Categorical Bin Predictors: T-test Wilcoxon rank-sum test. Categorical Multi Predictors: ANOVA (default) Kruskal-Wallis test. ANOVA used, Tukey’s HSD post-hoc test performed multiple comparisons. function automatically detects variable types applies appropriate test. categorical variable 10 unique levels, warning issued. invalid statistical test requested, function stops error message.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/compute_stat_tests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Statistical Tests for Variable Associations with a Target Variable — compute_stat_tests","text":"","code":"df <- data.frame(   score = c(80, 85, 90, 95, 100),   age = c(25, 30, 35, 40, 45),   gender = c(\"Male\", \"Female\", \"Male\", \"Female\", \"Male\"),   group = factor(c(\"A\", \"B\", \"A\", \"B\", \"C\")) )  results <- compute_stat_tests(df, target_var = \"score\") print(results) #> list()"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/counts_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene Expression Counts for Marthandan et al. (2016) RNA-Seq Data — counts_example","title":"Gene Expression Counts for Marthandan et al. (2016) RNA-Seq Data — counts_example","text":"numeric matrix containing gene expression data Marthandan et al. (2016) study (GEO code GSE63577). data represent normalized (non-transformed) counts genes across samples.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/counts_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene Expression Counts for Marthandan et al. (2016) RNA-Seq Data — counts_example","text":"","code":"counts_example"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/counts_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Gene Expression Counts for Marthandan et al. (2016) RNA-Seq Data — counts_example","text":"numeric matrix rows corresponding genes columns corresponding samples. Row names indicate gene symbols column names sample identifiers.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/counts_example.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Gene Expression Counts for Marthandan et al. (2016) RNA-Seq Data — counts_example","text":"https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE63577","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/counts_example.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gene Expression Counts for Marthandan et al. (2016) RNA-Seq Data — counts_example","text":"samples quality-controlled using FastQC aligned using kallisto (v0.46.1) RefSeq v109 transcriptome. original dataset 45 samples, intermediate time points HFF MRC5 removed.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/counts_example.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Gene Expression Counts for Marthandan et al. (2016) RNA-Seq Data — counts_example","text":"Marthandan S, Priebe S, Baumgart M, Groth M et al. Similarities Gene Expression Profiles Vitro Aging Primary Human Embryonic Lung Foreskin Fibroblasts. Biomed Res Int 2015;2015:731938. PMID: 26339636 Marthandan S, Baumgart M, Priebe S, Groth M et al. Conserved Senescence Associated Genes Pathways Primary Human Fibroblasts Detected RNA-Seq. PLoS One 2016;11(5):e0154531. PMID: 27140416","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/create_contrast_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Contrast Column in Metadata — create_contrast_column","title":"Create Contrast Column in Metadata — create_contrast_column","text":"function extracts processes contrast groups given contrast string, assigns contrast labels metadata subset based variable interest.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/create_contrast_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Contrast Column in Metadata — create_contrast_column","text":"","code":"create_contrast_column(metadata, variable_name, contrast)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/create_contrast_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Contrast Column in Metadata — create_contrast_column","text":"metadata data frame containing sample metadata. variable_name character string specifying column name metadata represents variable interest. contrast character string representing contrast form \"(+ B) - (C + D)\" (e.g.).","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/create_contrast_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Contrast Column in Metadata — create_contrast_column","text":"subset metadata added cohentest column, indicating group membership based contrast.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/flatten_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Flatten a Nested List of Results into a Data Frame — flatten_results","title":"Flatten a Nested List of Results into a Data Frame — flatten_results","text":"Converts nested list (first level method, second level gene signature, third level data frame) single data frame. Additional columns method signature added data frame.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/flatten_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flatten a Nested List of Results into a Data Frame — flatten_results","text":"","code":"flatten_results(nested_list)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/flatten_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flatten a Nested List of Results into a Data Frame — flatten_results","text":"nested_list nested list structure: list(method = list(signature = data.frame(...))).","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/flatten_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flatten a Nested List of Results into a Data Frame — flatten_results","text":"data frame combining nested data frames, added columns method signature.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/generate_all_contrasts.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate All Possible Unique Contrasts Between Groups — generate_all_contrasts","title":"Generate All Possible Unique Contrasts Between Groups — generate_all_contrasts","text":"function creates statistical contrasts levels categorical variable. Users can choose level complexity: \"simple\": Pairwise comparisons (e.g., - B). \"medium\": Pairwise comparisons plus comparisons mean groups. \"extensive\": possible groupwise contrasts, ensuring balance number terms side.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/generate_all_contrasts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate All Possible Unique Contrasts Between Groups — generate_all_contrasts","text":"","code":"generate_all_contrasts(levels, mode = \"simple\")"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/generate_all_contrasts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate All Possible Unique Contrasts Between Groups — generate_all_contrasts","text":"levels character vector unique group levels. mode string specifying level detail contrasts. Options \"simple\" (pairwise ), \"medium\" (pairwise + vs. mean others), \"extensive\" (possible balanced groupwise contrasts). Default \"extensive\".","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/generate_all_contrasts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate All Possible Unique Contrasts Between Groups — generate_all_contrasts","text":"character vector unique contrast expressions.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/generate_all_contrasts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate All Possible Unique Contrasts Between Groups — generate_all_contrasts","text":"","code":"levels <- c(\"A\", \"B\", \"C\", \"D\") generate_all_contrasts(levels, mode = \"simple\")    # Pairwise only #> [1] \"A - B\" \"A - C\" \"A - D\" \"B - C\" \"B - D\" \"C - D\" generate_all_contrasts(levels, mode = \"medium\")    # Pairwise + mean comparisons #>  [1] \"A - B\"             \"A - C\"             \"A - D\"             #>  [4] \"B - C\"             \"B - D\"             \"C - D\"             #>  [7] \"A - (B + C + D)/3\" \"(A + C + D)/3 - B\" \"(A + B + D)/3 - C\" #> [10] \"(A + B + C)/3 - D\" generate_all_contrasts(levels, mode = \"extensive\") # All balanced contrasts #>  [1] \"A - B\"                 \"A - C\"                 \"A - D\"                 #>  [4] \"B - C\"                 \"B - D\"                 \"C - D\"                 #>  [7] \"A - (B + C + D)/3\"     \"(A + C + D)/3 - B\"     \"(A + B + D)/3 - C\"     #> [10] \"(A + B + C)/3 - D\"     \"(A + B)/2 - (C + D)/2\" \"(A + C)/2 - (B + D)/2\" #> [13] \"(A + D)/2 - (B + C)/2\""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/getRanking.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Gene Expression Ranking — getRanking","title":"Get Gene Expression Ranking — getRanking","text":"Computes rank sum given gene set within sample based expression level.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/getRanking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Gene Expression Ranking — getRanking","text":"","code":"getRanking(data, sample, geneset)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/getRanking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Gene Expression Ranking — getRanking","text":"data data frame rows represent genes, columns represent samples, values correspond expression levels. sample character string specifying sample name (column data). geneset vector gene names ranked.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/getRanking.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Gene Expression Ranking — getRanking","text":"sum ranks genes found sample.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/getRanking.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Gene Expression Ranking — getRanking","text":"function orders gene expression levels lowest highest. determines rank gene geneset returns sum ranks. genes missing, omitted ranking calculation.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/getRanking.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Gene Expression Ranking — getRanking","text":"","code":"# Example dataset with 5 genes and 3 samples set.seed(123) data <- as.data.frame(matrix(runif(15, 1, 100), nrow = 5, ncol = 3)) rownames(data) <- paste0(\"Gene_\", 1:5) colnames(data) <- paste0(\"Sample_\", 1:3)  # Define gene set geneset <- c(\"Gene_1\", \"Gene_3\", \"Gene_5\")  # Compute ranking for Sample_1 rank_score <- getRanking(data, \"Sample_1\", geneset) print(rank_score) #> [1] 8"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/identify_variable_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Variable Types — identify_variable_type","title":"Identify Variable Types — identify_variable_type","text":"Determines type variable given data frame. Variables classified \"Numeric\", \"Categorical Bin\" (binary categorical), \"Categorical Multi\" (multi-level categorical). Warnings issued categorical variables 10 unique values.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/identify_variable_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Variable Types — identify_variable_type","text":"","code":"identify_variable_type(df, cols = NULL)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/identify_variable_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Variable Types — identify_variable_type","text":"df data frame containing variables classify. cols character vector column names consider.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/identify_variable_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Variable Types — identify_variable_type","text":"named character vector names correspond column names values indicate variable type: \"Numeric\", \"Categorical Bin\", \"Categorical Multi\".","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/identify_variable_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Variable Types — identify_variable_type","text":"","code":"df <- data.frame(   age = c(25, 30, 35, 40),   gender = c(\"Male\", \"Female\", \"Female\", \"Male\"),   score = c(80, 85, 90, 95) ) identify_variable_type(df) #> [1] \"Unknown\""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/markeR.html","id":null,"dir":"Reference","previous_headings":"","what":"markeR: An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers — markeR","title":"markeR: An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers — markeR","text":"markeR package provides tools evaluating gene signatures across phenotypes transcriptomics datasets (especially bulk RNA-seq). implements scoring enrichment approaches, alongside intuitive visualizations performance metrics. Key features: Score-based signature quantification (e.g., median-centered, ssGSEA, ranking) Enrichment analysis using GSEA Visualization gene expression, scores, enrichment results","code":""},{"path":[]},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/markeR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"markeR: An R Toolkit for Evaluating Gene Signatures as Phenotypic Markers — markeR","text":"Maintainer: Rita Martins-Silva rita.silva@gimm.pt (ORCID) Authors: Alexandre Kaizeler (ORCID) [contributor] Nuno Luís Barbosa-Morais (ORCID) [lead, thesis advisor]","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/metadata_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Metadata for Marthandan et al. (2016) RNA-Seq Study — metadata_example","title":"Metadata for Marthandan et al. (2016) RNA-Seq Study — metadata_example","text":"data frame containing metadata samples Marthandan et al. (2016) study (GEO code GSE63577).","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/metadata_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metadata for Marthandan et al. (2016) RNA-Seq Study — metadata_example","text":"","code":"metadata_example"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/metadata_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Metadata for Marthandan et al. (2016) RNA-Seq Study — metadata_example","text":"data frame 45 rows 6 columns: sampleID Unique sample identifier. DatasetID Identifier dataset (e.g., \"Marthandan2016\"). CellType Cell type, e.g. \"Fibroblast\". Condition Experimental condition (\"Senescent\" \"Proliferative\"). SenescentType Mechanism senescence (e.g., \"Telomere shortening\" senescent samples, \"none\" proliferative). Treatment Treatment age descriptor (e.g., \"PD72 (Replicative senescence)\" senescent samples, \"young\" proliferative).","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/metadata_example.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Metadata for Marthandan et al. (2016) RNA-Seq Study — metadata_example","text":"https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE63577","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/metadata_example.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Metadata for Marthandan et al. (2016) RNA-Seq Study — metadata_example","text":"Marthandan S, Priebe S, Baumgart M, Groth M et al. Similarities Gene Expression Profiles Vitro Aging Primary Human Embryonic Lung Foreskin Fibroblasts. Biomed Res Int 2015;2015:731938. PMID: 26339636 Marthandan S, Baumgart M, Priebe S, Groth M et al. Conserved Senescence Associated Genes Pathways Primary Human Fibroblasts Detected RNA-Seq. PLoS One 2016;11(5):e0154531. PMID: 27140416","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotCombinedGSEA.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Combined GSEA Results — plotCombinedGSEA","title":"Plot Combined GSEA Results — plotCombinedGSEA","text":"function creates scatter plot visualizing multiple GSEA (Gene Set Enrichment Analysis) results across different contrasts. point represents pathway, : x-axis corresponds Normalized Enrichment Score (NES). y-axis corresponds significance level (-log10 adjusted p-value). color represents different pathways. shape represents different contrasts. dashed horizontal line marks chosen significance threshold.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotCombinedGSEA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Combined GSEA Results — plotCombinedGSEA","text":"","code":"plotCombinedGSEA(   GSEA_results,   sig_threshold = 0.05,   PointSize = 4,   widthlegend = 16 )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotCombinedGSEA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Combined GSEA Results — plotCombinedGSEA","text":"GSEA_results named list data frames, data frame contains GSEA results contrast. data frame columns: NES (Normalized Enrichment Score), padj (adjusted p-value), pathway (pathway name). Output runGSEA. sig_threshold Numeric, default = 0.05. Adjusted p-value threshold significance. dashed horizontal line drawn threshold. PointSize Numeric, default = 4. Size plotted points. widthlegend Numeric, default = 16. Controls width pathway labels legend.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotCombinedGSEA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Combined GSEA Results — plotCombinedGSEA","text":"ggplot2 object displaying combined GSEA results.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotCombinedGSEA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Combined GSEA Results — plotCombinedGSEA","text":"","code":"# Example GSEA results (mock data) GSEA_results <- list( \"Contrast1\" = data.frame( NES = rnorm(3),   padj = runif(3),   pathway = paste(\"Pathway\", 1:3),   stat_used = c(\"t\", \"B\", \"B\") ), \"Contrast2\" = data.frame(   NES = rnorm(3),   padj = runif(3),   pathway = paste(\"Pathway\", 4:6),   stat_used = c(\"t\", \"B\", \"B\") ) )   # Generate the plot plotCombinedGSEA(GSEA_results, sig_threshold = 0.05, PointSize = 4)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotGSEAenrichment.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot GSEA Enrichment Results — plotGSEAenrichment","title":"Plot GSEA Enrichment Results — plotGSEAenrichment","text":"function generates enrichment plots gene sets using fgsea::plotEnrichment() function. supports individual plots (returned list) grid layout using ggpubr::ggarrange().","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotGSEAenrichment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot GSEA Enrichment Results — plotGSEAenrichment","text":"","code":"plotGSEAenrichment(   GSEA_results,   DEGList,   gene_sets,   widthTitle = 24,   grid = FALSE,   nrow = NULL,   ncol = NULL,   titlesize = 12 )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotGSEAenrichment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot GSEA Enrichment Results — plotGSEAenrichment","text":"GSEA_results named list data frames containing GSEA results contrast. data frame column named pathway specifying gene set, columns NES padj results. Output runGSEA. DEGList named list data frames containing differentially expressed genes (DEGs) contrast. data frame must include column named t t-statistics ranking genes. Output calculateDE. gene_sets named list gene sets, entry either: vector gene names (unidirectional gene set) data frame two columns: gene names direction (+1 enriched -1 depleted). widthTitle Integer. maximum width (characters) wrapping plot titles. Default 24. grid Logical. TRUE, plots arranged grid using ggpubr::ggarrange(). Default FALSE. nrow Integer. Number rows grid layout (used grid = TRUE). NULL, auto-calculated. ncol Integer. Number columns grid layout (used grid = TRUE). NULL, auto-calculated. titlesize Integer. Font size plot titles. Default 12.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotGSEAenrichment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot GSEA Enrichment Results — plotGSEAenrichment","text":"grid = FALSE, returns named list ggplot objects (plot corresponding contrast-signature pair). grid = TRUE, returns single ggplot object enrichment plots arranged grid.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotGSEAenrichment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot GSEA Enrichment Results — plotGSEAenrichment","text":"","code":"# Example GSEA results (mock data, missing columns if running by runGSEA)  GSEA_results <- list( \"Contrast1\" = data.frame( NES = rnorm(3),   padj = runif(3),   pathway = paste(\"Pathway\", 1:3),   stat_used = c(\"t\", \"B\", \"B\") ), \"Contrast2\" = data.frame(   NES = rnorm(3),   padj = runif(3),   pathway = paste(\"Pathway\", 4:6),   stat_used = c(\"t\", \"B\", \"B\") ) )   # Generate the plot plot <- plotCombinedGSEA(GSEA_results, sig_threshold = 0.05, PointSize = 4) print(plot)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotNESlollipop.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Lollipop Plot for GSEA Results — plotNESlollipop","title":"Create a Lollipop Plot for GSEA Results — plotNESlollipop","text":"function generates lollipop plot visualize Gene Set Enrichment Analysis (GSEA) results. Pathways shown y-axis, Normalized Enrichment Score (NES) shown x-axis. color lollipops represents adjusted p-values (padj), custom color gradient. supports multiple contrasts can combine individual plots grid layout.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotNESlollipop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Lollipop Plot for GSEA Results — plotNESlollipop","text":"","code":"plotNESlollipop(   GSEA_results,   signif_color = \"red\",   nonsignif_color = \"white\",   sig_threshold = 0.05,   saturation_value = NULL,   pointSize = 5,   grid = FALSE,   nrow = NULL,   ncol = NULL,   widthlabels = 18,   title = NULL,   titlesize = 12 )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotNESlollipop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Lollipop Plot for GSEA Results — plotNESlollipop","text":"GSEA_results named list data frames, containing GSEA results specific contrast. Output runGSEA. data frame must include following columns: pathway character vector pathway names. NES numeric vector Normalized Enrichment Scores pathways. padj numeric vector adjusted p-values pathways. signif_color string specifying color low end adjusted p-value gradient value chosen significance (sig_threshold). Default \"red\". nonsignif_color string specifying color middle adjusted p-value gradient. Default \"white\". Lower limit correspond value sig_threshold. sig_threshold numeric value sets midpoint color scale. Typically used significance threshold. Default 0.05. saturation_value numeric value specifying lower limit adjusted p-value gradient, color correspond signif_color. Default results' minimum, unless value sig_threshold; case, 0.001. pointSize Numeric. size points lollipop plot (default 5). grid logical value indicating whether arrange individual plots grid layout. TRUE, function combines plots grid. Default FALSE. nrow numeric value specifying number rows arrange plots grid = TRUE. NULL, function calculates automatically. Default NULL. ncol numeric value specifying number columns arrange plots grid = TRUE. NULL, function calculates automatically. Default NULL. widthlabels numeric value specifying maximum width pathway names. pathway name exceeds width, wrapped fit. Default 18. title character string title combined plot (used grid = TRUE). Default NULL. titlesize numeric value specifying font size title (used grid = TRUE). Default 12.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotNESlollipop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Lollipop Plot for GSEA Results — plotNESlollipop","text":"grid = FALSE, list ggplot objects returned, corresponding contrast. grid = TRUE, single ggplot object returned, representing combined grid plots.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotNESlollipop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Lollipop Plot for GSEA Results — plotNESlollipop","text":"function creates lollipop plot contrast GSEA_results list. plot includes: vertical segment pathway, x-coordinate represents NES y-coordinate represents pathway. colored point end segment, color represents adjusted p-value (padj), mapped using custom color gradient. pathway's padj value exceeds maximum value padj_limit, corresponding pathway colored using high_color. Additionally, missing values (NA) padj assigned high_color setting na.value = high_color. Pathway names wrapped using wrap_title function fit within specified width (widthlabels).","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotNESlollipop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Lollipop Plot for GSEA Results — plotNESlollipop","text":"","code":"# Example GSEA results (mock data, missing columns if running by runGSEA)  GSEA_results <- list( \"Contrast1\" = data.frame( NES = rnorm(3),   padj = runif(3),   pathway = paste(\"Pathway\", 1:3),   stat_used = c(\"t\", \"B\", \"B\") ), \"Contrast2\" = data.frame(   NES = rnorm(3),   padj = runif(3),   pathway = paste(\"Pathway\", 4:6),   stat_used = c(\"t\", \"B\", \"B\") ) )   # Generate individual plots without grid plot_list <- plotNESlollipop(GSEA_results)  # Generate combined grid of plots with custom title combined_plot <- plotNESlollipop(GSEA_results, grid = TRUE, title = \"GSEA Results Overview\", titlesize = 14)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotPCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Principal Component Analysis (PCA) Plot — plotPCA","title":"Principal Component Analysis (PCA) Plot — plotPCA","text":"function performs PCA given dataset visualizes results using ggplot2. allows users specify genes interest, customize scaling centering, color points based metadata variable.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotPCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Principal Component Analysis (PCA) Plot — plotPCA","text":"","code":"plotPCA(   data,   metadata = NULL,   genes = NULL,   scale = FALSE,   center = TRUE,   PCs = list(c(1, 2)),   ColorVariable = NULL,   ColorValues = NULL,   pointSize = 5,   legend_nrow = 2,   legend_position = c(\"bottom\", \"top\", \"right\", \"left\"),   ncol = NULL,   nrow = NULL )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotPCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Principal Component Analysis (PCA) Plot — plotPCA","text":"data numeric matrix data frame rows represent genes columns represent samples. metadata data frame containing sample metadata. first column contain sample names. Default NULL. genes character vector specifying genes included PCA. Default NULL (uses genes). scale Logical; TRUE, variables scaled PCA. Default FALSE. center Logical; TRUE, variables centered PCA. Default TRUE. PCs list specifying principal components (PCs) plot. Default list(c(1,2)). ColorVariable character string specifying metadata column used coloring points. Default NULL. ColorValues vector specifying custom colors groups ColorVariable. Default NULL. pointSize Numeric; sets size points plot. Default 5. legend_nrow Integer; number rows legend. Default 2. legend_position Character; position legend (\"bottom\", \"top\", \"right\", \"left\"). Default \"bottom\". ncol Integer; number columns arranged PCA plots. Default determined automatically. nrow Integer; number rows arranged PCA plots. Default determined automatically.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotPCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Principal Component Analysis (PCA) Plot — plotPCA","text":"invisible list containing: plt ggplot2 ggarrange object displaying PCA plot. data data frame containing PCA-transformed data sample metadata (NULL).","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotPCA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Principal Component Analysis (PCA) Plot — plotPCA","text":"function performs PCA using prcomp() visualizes results using ggplot2. metadata data frame provided, ensures sample order matches data metadata.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotPCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Principal Component Analysis (PCA) Plot — plotPCA","text":"","code":"if (FALSE) { # \\dontrun{ # Example dataset set.seed(123) data <- matrix(rnorm(1000), nrow=50, ncol=20) colnames(data) <- paste0(\"Sample\", 1:20) rownames(data) <- paste0(\"Gene\", 1:50)  metadata <- data.frame(Sample = colnames(data),                        Group = rep(c(\"A\", \"B\"), each = 10))  # Basic PCA plot plotPCA(data, metadata, ColorVariable = \"Group\") } # }"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotVolcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Volcano Plots from Differential Expression Results — plotVolcano","title":"Volcano Plots from Differential Expression Results — plotVolcano","text":"function creates composite volcano plot grid list differential expression results., single volcano genes highlight provided one contrast used. contrast (provided DEResultsList) gene signature (genes argument), volcano plot generated using specified x y statistics. default, invert = FALSE one gene signature provided (.e. names genes \"\" \"genes\"), plots arranged gene signatures rows contrasts columns. invert = TRUE, arrangement reversed (signatures columns contrasts rows). one gene signature provided, automatic grid computed.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotVolcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Volcano Plots from Differential Expression Results — plotVolcano","text":"","code":"plotVolcano(   DEResultsList,   genes = NULL,   N = NULL,   x = \"logFC\",   y = \"-log10(adj.P.Val)\",   pointSize = 2,   color = \"#6489B4\",   highlightcolor = \"#05254A\",   highlightcolor_upreg = \"#038C65\",   highlightcolor_downreg = \"#8C0303\",   nointerestcolor = \"#B7B7B7\",   threshold_y = NULL,   threshold_x = NULL,   xlab = NULL,   ylab = NULL,   ncol = NULL,   nrow = NULL,   title = NULL,   labsize = 10,   widthlabs = 20,   invert = FALSE )"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotVolcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Volcano Plots from Differential Expression Results — plotVolcano","text":"DEResultsList named list data frames containing differential expression results contrast. data frame row names corresponding gene names include columns x y statistics. Output calculateDE. genes Optional. list gene signatures highlight. element may data frame (case first column extracted) vector gene names. NULL, genes highlighted. N Optional. integer specifying number top (bottom) genes annotate text labels. x Character. column name differential expression results use x-axis (default \"logFC\"). y Character. column name use y-axis (default \"-log10(adj.P.Val)\"). using default, threshold values threshold_y provided non-log scale (e.g., 0.05). pointSize Numeric. size points volcano plots (default 2). color Character. color used highlight interesting genes based thresholds (default \"#6489B4\"). highlightcolor Character. color used highlight genes belonging specified gene signatures (default \"#05254A\"), direction known specified. highlightcolor_upreg Character. color used highlight upregulated genes belonging specified gene signatures (default \"#038C65\"). highlightcolor_downreg Character. color used highlight downregulated genes belonging specified gene signatures (default \"#8C0303\"). nointerestcolor Character. color non-interesting genes (default \"#B7B7B7\"). threshold_y Numeric. threshold value y-axis statistic. y \"-log10(adj.P.Val)\", value provided non-log value (e.g., 0.05) transformed internally. threshold_x Numeric. threshold value x-axis statistic. xlab Optional. label x-axis; NULL, value x used. ylab Optional. label y-axis; NULL, value y used. ncol Optional. number columns arranging plots grid. applicable genes NULL. nrow Optional. number rows arranging plots grid. title Optional. main title entire composite plot. labsize Numeric. font size label annotations (default 10). title size value + 4. widthlabs Numeric. width parameter pass wrap_title() function wrapping long labels (default 20). invert Logical. FALSE (default), grid arranged gene signatures rows contrasts columns. TRUE, arrangement inverted (gene signatures columns contrasts rows).","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotVolcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Volcano Plots from Differential Expression Results — plotVolcano","text":"composite plot (ggplot object) arranged grid volcano plots annotated labels.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotVolcano.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Volcano Plots from Differential Expression Results — plotVolcano","text":"function generates volcano plot combination gene signature (genes) contrast (DEResultsList). uses specified x y statistics plot points via ggplot2. Non-interesting genes plotted using nointerestcolor, genes specified gene signature (\"\") highlighted using highlightcolor. Optionally, top bottom N genes can annotated text labels (using ggrepel::geom_text_repel). Threshold lines x /y axes added threshold_x threshold_y provided. individual plots arranged grid using ggpubr::ggarrange annotated labels using ggpubr::annotate_figure grid::textGrob. custom wrap_title() function used wrap long labels. Additionally, function allows: Plotting differentially expressed genes based provided statistics (e.g., x = \"logFC\" y = \"-log10(adj.P.Val)\"). Coloring non-interesting genes highlighting genes belonging specific gene signatures. Annotation top N genes text labels (using ggrepel::geom_text_repel). Addition threshold lines x /y axes.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/plotVolcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Volcano Plots from Differential Expression Results — plotVolcano","text":"","code":"if (FALSE) { # \\dontrun{ # Create example data: data <- matrix(rnorm(1000), nrow = 100, ncol = 10) rownames(data) <- paste0(\"gene\", 1:100) colnames(data) <- paste0(\"sample\", 1:10) metadata <- data.frame(sample = colnames(data), X = rep(c(\"A\", \"B\"), each = 5))  # Example differential expression results (for two contrasts): de_results <- list(   Contrast1 = data.frame(logFC = rnorm(100), `-log10(adj.P.Val)` = runif(100, 0, 5),                          row.names = paste0(\"gene\", 1:100)),   Contrast2 = data.frame(logFC = rnorm(100), `-log10(adj.P.Val)` = runif(100, 0, 5),                          row.names = paste0(\"gene\", 1:100)) )  # Basic volcano plot grid with default settings: plotVolcano(de_results, genes = NULL, N = NULL,             x = \"logFC\", y = \"-log10(adj.P.Val)\", pointSize = 2,             color = \"#6489B4\", highlightcolor = \"#05254A\", nointerestcolor = \"#B7B7B7\",             threshold_y = NULL, threshold_x = NULL,             xlab = NULL, ylab = NULL, ncol = NULL, nrow = NULL, title = \"Volcano Plot Grid\",             labsize = 10, widthlabs = 20, invert = FALSE) } # }"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/remove_division.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Division Notation in Contrast Labels — remove_division","title":"Remove Division Notation in Contrast Labels — remove_division","text":"function removes division notation (e.g., /2, /3) closing parentheses contrast labels.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/remove_division.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Division Notation in Contrast Labels — remove_division","text":"","code":"remove_division(contrasts)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/remove_division.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Division Notation in Contrast Labels — remove_division","text":"contrasts character vector containing contrast labels.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/remove_division.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Division Notation in Contrast Labels — remove_division","text":"character vector division notation removed.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/runGSEA.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Gene Set Enrichment Analysis (GSEA) for Multiple Contrasts — runGSEA","title":"Run Gene Set Enrichment Analysis (GSEA) for Multiple Contrasts — runGSEA","text":"function performs GSEA using fgsea contrast list differential expression results. automatically determines appropriate ranking statistic based gene set format unless specified user.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/runGSEA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Gene Set Enrichment Analysis (GSEA) for Multiple Contrasts — runGSEA","text":"","code":"runGSEA(DEGList, gene_sets, stat = NULL)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/runGSEA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Gene Set Enrichment Analysis (GSEA) for Multiple Contrasts — runGSEA","text":"DEGList named list element represents contrast contains data frame differential expression results. data frame must include least \"t\" statistic \"B\" statistic gene. Row names correspond gene identifiers. gene_sets named list element represents gene set. gene set can : vector gene names (unidirectional gene sets). data frame two columns: Column 1: Gene names. Column 2: Expected direction (1 upregulated genes, -1 downregulated genes). stat Optional. statistic use ranking genes GSEA. NULL, automatically determined based gene set: \"B\" gene sets known direction (vectors). \"t\" unidirectional bidirectional gene sets (data frames). provided, argument overrides automatic selection.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/runGSEA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Gene Set Enrichment Analysis (GSEA) for Multiple Contrasts — runGSEA","text":"named list element corresponds contrast. contrast contains single data frame GSEA results gene sets. P-values corrected multiple testing based contrasts. result includes standard fgsea output plus two additional columns: pathway: name gene set. stat_used: statistic used ranking genes analysis (\"t\" \"B\").","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/runGSEA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Gene Set Enrichment Analysis (GSEA) for Multiple Contrasts — runGSEA","text":"","code":"# Example input data DEGList <- list(   Contrast1 = data.frame(t = rnorm(100), B = rnorm(100), row.names = paste0(\"Gene\", 1:100)),   Contrast2 = data.frame(t = rnorm(100), B = rnorm(100), row.names = paste0(\"Gene\", 1:100)) )  gene_sets <- list(   UnidirectionalSet = c(\"Gene1\", \"Gene5\", \"Gene20\"),   BidirectionalSet = data.frame(Gene = c(\"Gene2\", \"Gene10\", \"Gene15\"), Direction = c(1, -1, 1)) )  results <- runGSEA(DEGList, gene_sets)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ssGSEA_alternative.html","id":null,"dir":"Reference","previous_headings":"","what":"Alternative Implementation of Single-Sample Gene Set Enrichment Analysis (ssGSEA) — ssGSEA_alternative","title":"Alternative Implementation of Single-Sample Gene Set Enrichment Analysis (ssGSEA) — ssGSEA_alternative","text":"function computes enrichment score sample using alternative single-sample Gene Set Enrichment Analysis (ssGSEA) method. first maps gene sets gene indices present expression matrix, ranks genes sample, finally calculates weighted enrichment score based cumulative differences -set --set gene ranks. Source: https://rpubs.com/pranali018/SSGSEA","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ssGSEA_alternative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alternative Implementation of Single-Sample Gene Set Enrichment Analysis (ssGSEA) — ssGSEA_alternative","text":"","code":"ssGSEA_alternative(X, gene_sets, alpha = 0.25, scale = T, norm = F, single = T)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ssGSEA_alternative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alternative Implementation of Single-Sample Gene Set Enrichment Analysis (ssGSEA) — ssGSEA_alternative","text":"X numeric matrix gene expression values rows representing genes columns representing samples. Row names correspond gene identifiers. gene_sets list gene sets, element vector gene identifiers. function match identifiers row names X. alpha numeric value specifying exponent used weight ranking scores. Default 0.25. scale Logical; TRUE, cumulative difference normalized total number genes. Default TRUE. norm Logical; TRUE, enrichment scores normalized absolute difference maximum minimum scores. Default FALSE. single Logical; TRUE, function returns sum cumulative differences enrichment score. FALSE, maximum absolute cumulative difference used. Default TRUE.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ssGSEA_alternative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alternative Implementation of Single-Sample Gene Set Enrichment Analysis (ssGSEA) — ssGSEA_alternative","text":"matrix enrichment scores rows corresponding gene sets columns corresponding samples.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ssGSEA_alternative.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Alternative Implementation of Single-Sample Gene Set Enrichment Analysis (ssGSEA) — ssGSEA_alternative","text":"function performs following steps: Maps gene set indices genes X matching gene identifiers. Computes column-wise rankings gene expression matrix using ranking method (via colRanking function) tie resolution set 'average'. sample, orders gene ranks decreasing order. gene set sample, calculates: weighted contribution (rank_alpha) genes set raised power alpha. cumulative distribution functions (CDFs) genes within gene set (step_cdf_pos) gene set (step_cdf_neg). difference CDFs, optionally scaled number genes scale = TRUE. Depending single parameter, either sum differences (TRUE) maximum absolute difference (FALSE) used enrichment score gene set. Optionally normalizes final enrichment scores range values norm = TRUE.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/ssGSEA_alternative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alternative Implementation of Single-Sample Gene Set Enrichment Analysis (ssGSEA) — ssGSEA_alternative","text":"","code":"if (FALSE) { # \\dontrun{   # Create a sample gene expression matrix:   X <- matrix(rnorm(1000), nrow = 100, ncol = 10)   rownames(X) <- paste0(\"gene\", 1:100)    # Define example gene sets:   gene_sets <- list(     set1 = sample(rownames(X), 10),     set2 = sample(rownames(X), 15)   )    # Compute the ssGSEA enrichment scores:   es <- ssGSEA_alternative(X, gene_sets, alpha = 0.25, scale = TRUE, norm = FALSE, single = TRUE)   print(es) } # }"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/wrap_title.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap Long Titles with Capital Letter Prioritization (when no symbols are nearby) — wrap_title","title":"Wrap Long Titles with Capital Letter Prioritization (when no symbols are nearby) — wrap_title","text":"function wraps long titles multiple lines fit specified width, prioritizing breaks symbols like underscores, hyphens, colons close wrap point. special symbol found nearby, function break title first capital letter. neither found, title broken specified width.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/wrap_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap Long Titles with Capital Letter Prioritization (when no symbols are nearby) — wrap_title","text":"","code":"wrap_title(title, width = 30)"},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/wrap_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap Long Titles with Capital Letter Prioritization (when no symbols are nearby) — wrap_title","text":"title character string representing title wrapped. (Required) width numeric value specifying maximum width line. default 30 characters. (Optional)","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/reference/wrap_title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap Long Titles with Capital Letter Prioritization (when no symbols are nearby) — wrap_title","text":"character string title wrapped multiple lines. line exceed specified width, breaks prioritized symbols nearby, capital letters used symbols present.","code":""},{"path":"https://diseasetranscriptomicslab.github.io/markeR/news/index.html","id":"marker-100-21-apr-2025","dir":"Changelog","previous_headings":"","what":"markeR 1.0.0 (21 Apr, 2025)","title":"markeR 1.0.0 (21 Apr, 2025)","text":"Initial release package. Implementation score-based enrichment-based methods evaluate gene signatures phenotype markers. Visualization individual genes’ expression, scores, enrichment results Add pkgdown documentation site: https://diseasetranscriptomicslab.github.io/markeR/","code":""}]
